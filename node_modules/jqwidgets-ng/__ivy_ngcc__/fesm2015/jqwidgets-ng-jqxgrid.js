import '../jqwidgets/jqxcore';
import '../jqwidgets/jqxdata';
import '../jqwidgets/jqxdata.export';
import '../jqwidgets/jqxbuttons';
import '../jqwidgets/jqxbuttongroup';
import '../jqwidgets/jqxscrollbar';
import '../jqwidgets/jqxmenu';
import '../jqwidgets/jqxlistbox';
import '../jqwidgets/jqxdropdownlist';
import '../jqwidgets/jqxcombobox';
import '../jqwidgets/jqxnumberinput';
import '../jqwidgets/jqxcheckbox';
import '../jqwidgets/globalization/globalize';
import '../jqwidgets/jqxcalendar';
import '../jqwidgets/jqxdatetimeinput';
import '../jqwidgets/jqxgrid';
import '../jqwidgets/jqxgrid.edit';
import '../jqwidgets/jqxgrid.pager';
import '../jqwidgets/jqxgrid.selection';
import '../jqwidgets/jqxgrid.filter';
import '../jqwidgets/jqxgrid.sort';
import '../jqwidgets/jqxgrid.storage';
import '../jqwidgets/jqxgrid.grouping';
import '../jqwidgets/jqxgrid.export';
import '../jqwidgets/jqxgrid.columnsresize';
import '../jqwidgets/jqxgrid.columnsreorder';
import '../jqwidgets/jqxgrid.aggregates';
import '../jqwidgets/jqxgrid.chart';
import { EventEmitter, Component, ElementRef, Input, Output, NgModule } from '@angular/core';

/// <reference path="../../jqwidgets.d.ts" />
import * as Éµngcc0 from '@angular/core';

const _c0 = ["*"];
class jqxGridComponent {
    constructor(containerElement) {
        this.autoCreate = true;
        this.properties = ['altrows', 'altstart', 'altstep', 'autoshowloadelement', 'autoshowfiltericon', 'autoshowcolumnsmenubutton', 'showcolumnlines', 'showrowlines', 'showcolumnheaderlines', 'adaptive', 'adaptivewidth', 'clipboard', 'closeablegroups', 'columnsmenuwidth', 'columnmenuopening', 'columnmenuclosing', 'cellhover', 'enablekeyboarddelete', 'enableellipsis', 'enablemousewheel', 'enableanimations', 'enabletooltips', 'enablehover', 'enablebrowserselection', 'everpresentrowposition', 'everpresentrowheight', 'everpresentrowactions', 'everpresentrowactionsmode', 'filterrowheight', 'filtermode', 'groupsrenderer', 'groupcolumnrenderer', 'groupsexpandedbydefault', 'handlekeyboardnavigation', 'pagerrenderer', 'rtl', 'showdefaultloadelement', 'showfiltercolumnbackground', 'showfiltermenuitems', 'showpinnedcolumnbackground', 'showsortcolumnbackground', 'showsortmenuitems', 'showgroupmenuitems', 'showrowdetailscolumn', 'showheader', 'showgroupsheader', 'showaggregates', 'showgroupaggregates', 'showeverpresentrow', 'showfilterrow', 'showemptyrow', 'showstatusbar', 'statusbarheight', 'showtoolbar', 'showfilterbar', 'filterbarmode', 'selectionmode', 'updatefilterconditions', 'updatefilterpanel', 'theme', 'toolbarheight', 'autoheight', 'autorowheight', 'columnsheight', 'deferreddatafields', 'groupsheaderheight', 'groupindentwidth', 'height', 'pagerheight', 'rowsheight', 'scrollbarsize', 'scrollmode', 'scrollfeedback', 'width', 'autosavestate', 'autoloadstate', 'columns', 'enableSanitize', 'cardview', 'cardviewcolumns', 'cardheight', 'cardsize', 'columngroups', 'columnsmenu', 'columnsresize', 'columnsautoresize', 'columnsreorder', 'charting', 'disabled', 'editable', 'batcheditable', 'editmode', 'filter', 'filterable', 'groupable', 'groups', 'horizontalscrollbarstep', 'horizontalscrollbarlargestep', 'initrowdetails', 'keyboardnavigation', 'localization', 'pagesize', 'pagesizeoptions', 'pagermode', 'pagerbuttonscount', 'pageable', 'autofill', 'rowdetails', 'rowdetailstemplate', 'ready', 'rendered', 'renderstatusbar', 'rendertoolbar', 'rendergridrows', 'sortable', 'sortmode', 'selectedrowindex', 'selectedrowindexes', 'source', 'sorttogglestates', 'updatedelay', 'virtualmode', 'verticalscrollbarstep', 'verticalscrollbarlargestep'];
        // jqxGridComponent events
        this.onBindingcomplete = new EventEmitter();
        this.onColumnresized = new EventEmitter();
        this.onColumnreordered = new EventEmitter();
        this.onColumnclick = new EventEmitter();
        this.onCellclick = new EventEmitter();
        this.onCelldoubleclick = new EventEmitter();
        this.onCellselect = new EventEmitter();
        this.onCellunselect = new EventEmitter();
        this.onCellvaluechanged = new EventEmitter();
        this.onCellbeginedit = new EventEmitter();
        this.onCellendedit = new EventEmitter();
        this.onFilter = new EventEmitter();
        this.onGroupschanged = new EventEmitter();
        this.onGroupexpand = new EventEmitter();
        this.onGroupcollapse = new EventEmitter();
        this.onPagechanged = new EventEmitter();
        this.onPagesizechanged = new EventEmitter();
        this.onRowclick = new EventEmitter();
        this.onRowdoubleclick = new EventEmitter();
        this.onRowselect = new EventEmitter();
        this.onRowunselect = new EventEmitter();
        this.onRowexpand = new EventEmitter();
        this.onRowcollapse = new EventEmitter();
        this.onSort = new EventEmitter();
        this.elementRef = containerElement;
    }
    ngOnInit() {
    }
    ;
    ngAfterViewInit() {
        let children = JQXLite(this.elementRef.nativeElement.children).find('tr');
        let html = '';
        let options = {};
        if (children.length > 0) {
            this.container = document.createElement('div');
            html = this.elementRef.nativeElement.innerHTML;
            this.container.appendChild(this.elementRef.nativeElement.firstChild);
            this.elementRef.nativeElement.innerHTML = html;
            this.content = html;
            let result = JQXLite.jqx.parseSourceTag(this.container);
            if (this['attrColumns'] !== undefined) {
                ;
                options['source'] = result.source;
            }
            else {
                options['source'] = result.source;
                options['columns'] = result.columns;
            }
        }
        if (this.autoCreate) {
            this.createComponent(options);
        }
    }
    ;
    ngAfterViewChecked() {
        if (this.container) {
            if (this.content !== this.container.innerHTML) {
                this.content = this.container.innerHTML;
                let result = JQXLite.jqx.parseSourceTag(this.container);
                let columns = this.host.jqxGrid('columns');
                if (columns.length === 0) {
                    this.host.jqxGrid({ source: result.source, columns: result.columns });
                }
                else {
                    this.host.jqxGrid({ source: result.source });
                }
            }
        }
    }
    ;
    ngOnChanges(changes) {
        if (this.host) {
            for (let i = 0; i < this.properties.length; i++) {
                let attrName = 'attr' + this.properties[i].substring(0, 1).toUpperCase() + this.properties[i].substring(1);
                let areEqual = false;
                if (this[attrName] !== undefined) {
                    if (typeof this[attrName] === 'object') {
                        if (this[attrName] instanceof Array) {
                            areEqual = this.arraysEqual(this[attrName], this.host.jqxGrid(this.properties[i]));
                        }
                        if (areEqual) {
                            return false;
                        }
                        this.host.jqxGrid(this.properties[i], this[attrName]);
                        continue;
                    }
                    if (this[attrName] !== this.host.jqxGrid(this.properties[i])) {
                        this.host.jqxGrid(this.properties[i], this[attrName]);
                    }
                }
            }
        }
    }
    arraysEqual(attrValue, hostValue) {
        if ((attrValue && !hostValue) || (!attrValue && hostValue)) {
            return false;
        }
        if (attrValue.length != hostValue.length) {
            return false;
        }
        for (let i = 0; i < attrValue.length; i++) {
            if (attrValue[i] !== hostValue[i]) {
                return false;
            }
        }
        return true;
    }
    manageAttributes() {
        let options = {};
        for (let i = 0; i < this.properties.length; i++) {
            let attrName = 'attr' + this.properties[i].substring(0, 1).toUpperCase() + this.properties[i].substring(1);
            if (this[attrName] !== undefined) {
                options[this.properties[i]] = this[attrName];
            }
        }
        return options;
    }
    moveClasses(parentEl, childEl) {
        let classes = parentEl.classList;
        if (classes.length > 0) {
            childEl.classList.add(...classes);
        }
        parentEl.className = '';
    }
    moveStyles(parentEl, childEl) {
        let style = parentEl.style.cssText;
        childEl.style.cssText = style;
        parentEl.style.cssText = '';
    }
    createComponent(options) {
        if (this.host) {
            return;
        }
        if (options) {
            JQXLite.extend(options, this.manageAttributes());
        }
        else {
            options = this.manageAttributes();
        }
        this.host = JQXLite(this.elementRef.nativeElement.firstChild);
        this.moveClasses(this.elementRef.nativeElement, this.host[0]);
        this.moveStyles(this.elementRef.nativeElement, this.host[0]);
        this.__wireEvents__();
        this.widgetObject = jqwidgets.createInstance(this.host, 'jqxGrid', options);
    }
    createWidget(options) {
        this.createComponent(options);
    }
    __updateRect__() {
        if (this.host)
            this.host.css({ width: this.attrWidth, height: this.attrHeight });
    }
    setOptions(options) {
        this.host.jqxGrid('setOptions', options);
    }
    // jqxGridComponent properties
    altrows(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('altrows', arg);
        }
        else {
            return this.host.jqxGrid('altrows');
        }
    }
    altstart(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('altstart', arg);
        }
        else {
            return this.host.jqxGrid('altstart');
        }
    }
    altstep(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('altstep', arg);
        }
        else {
            return this.host.jqxGrid('altstep');
        }
    }
    autoshowloadelement(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('autoshowloadelement', arg);
        }
        else {
            return this.host.jqxGrid('autoshowloadelement');
        }
    }
    autoshowfiltericon(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('autoshowfiltericon', arg);
        }
        else {
            return this.host.jqxGrid('autoshowfiltericon');
        }
    }
    autoshowcolumnsmenubutton(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('autoshowcolumnsmenubutton', arg);
        }
        else {
            return this.host.jqxGrid('autoshowcolumnsmenubutton');
        }
    }
    showcolumnlines(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showcolumnlines', arg);
        }
        else {
            return this.host.jqxGrid('showcolumnlines');
        }
    }
    showrowlines(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showrowlines', arg);
        }
        else {
            return this.host.jqxGrid('showrowlines');
        }
    }
    showcolumnheaderlines(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showcolumnheaderlines', arg);
        }
        else {
            return this.host.jqxGrid('showcolumnheaderlines');
        }
    }
    adaptive(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('adaptive', arg);
        }
        else {
            return this.host.jqxGrid('adaptive');
        }
    }
    adaptivewidth(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('adaptivewidth', arg);
        }
        else {
            return this.host.jqxGrid('adaptivewidth');
        }
    }
    clipboard(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('clipboard', arg);
        }
        else {
            return this.host.jqxGrid('clipboard');
        }
    }
    closeablegroups(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('closeablegroups', arg);
        }
        else {
            return this.host.jqxGrid('closeablegroups');
        }
    }
    columnsmenuwidth(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('columnsmenuwidth', arg);
        }
        else {
            return this.host.jqxGrid('columnsmenuwidth');
        }
    }
    columnmenuopening(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('columnmenuopening', arg);
        }
        else {
            return this.host.jqxGrid('columnmenuopening');
        }
    }
    columnmenuclosing(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('columnmenuclosing', arg);
        }
        else {
            return this.host.jqxGrid('columnmenuclosing');
        }
    }
    cellhover(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('cellhover', arg);
        }
        else {
            return this.host.jqxGrid('cellhover');
        }
    }
    enablekeyboarddelete(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('enablekeyboarddelete', arg);
        }
        else {
            return this.host.jqxGrid('enablekeyboarddelete');
        }
    }
    enableellipsis(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('enableellipsis', arg);
        }
        else {
            return this.host.jqxGrid('enableellipsis');
        }
    }
    enablemousewheel(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('enablemousewheel', arg);
        }
        else {
            return this.host.jqxGrid('enablemousewheel');
        }
    }
    enableanimations(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('enableanimations', arg);
        }
        else {
            return this.host.jqxGrid('enableanimations');
        }
    }
    enabletooltips(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('enabletooltips', arg);
        }
        else {
            return this.host.jqxGrid('enabletooltips');
        }
    }
    enablehover(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('enablehover', arg);
        }
        else {
            return this.host.jqxGrid('enablehover');
        }
    }
    enablebrowserselection(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('enablebrowserselection', arg);
        }
        else {
            return this.host.jqxGrid('enablebrowserselection');
        }
    }
    everpresentrowposition(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('everpresentrowposition', arg);
        }
        else {
            return this.host.jqxGrid('everpresentrowposition');
        }
    }
    everpresentrowheight(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('everpresentrowheight', arg);
        }
        else {
            return this.host.jqxGrid('everpresentrowheight');
        }
    }
    everpresentrowactions(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('everpresentrowactions', arg);
        }
        else {
            return this.host.jqxGrid('everpresentrowactions');
        }
    }
    everpresentrowactionsmode(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('everpresentrowactionsmode', arg);
        }
        else {
            return this.host.jqxGrid('everpresentrowactionsmode');
        }
    }
    filterrowheight(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('filterrowheight', arg);
        }
        else {
            return this.host.jqxGrid('filterrowheight');
        }
    }
    filtermode(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('filtermode', arg);
        }
        else {
            return this.host.jqxGrid('filtermode');
        }
    }
    groupsrenderer(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('groupsrenderer', arg);
        }
        else {
            return this.host.jqxGrid('groupsrenderer');
        }
    }
    groupcolumnrenderer(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('groupcolumnrenderer', arg);
        }
        else {
            return this.host.jqxGrid('groupcolumnrenderer');
        }
    }
    groupsexpandedbydefault(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('groupsexpandedbydefault', arg);
        }
        else {
            return this.host.jqxGrid('groupsexpandedbydefault');
        }
    }
    handlekeyboardnavigation(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('handlekeyboardnavigation', arg);
        }
        else {
            return this.host.jqxGrid('handlekeyboardnavigation');
        }
    }
    pagerrenderer(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('pagerrenderer', arg);
        }
        else {
            return this.host.jqxGrid('pagerrenderer');
        }
    }
    rtl(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('rtl', arg);
        }
        else {
            return this.host.jqxGrid('rtl');
        }
    }
    showdefaultloadelement(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showdefaultloadelement', arg);
        }
        else {
            return this.host.jqxGrid('showdefaultloadelement');
        }
    }
    showfiltercolumnbackground(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showfiltercolumnbackground', arg);
        }
        else {
            return this.host.jqxGrid('showfiltercolumnbackground');
        }
    }
    showfiltermenuitems(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showfiltermenuitems', arg);
        }
        else {
            return this.host.jqxGrid('showfiltermenuitems');
        }
    }
    showpinnedcolumnbackground(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showpinnedcolumnbackground', arg);
        }
        else {
            return this.host.jqxGrid('showpinnedcolumnbackground');
        }
    }
    showsortcolumnbackground(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showsortcolumnbackground', arg);
        }
        else {
            return this.host.jqxGrid('showsortcolumnbackground');
        }
    }
    showsortmenuitems(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showsortmenuitems', arg);
        }
        else {
            return this.host.jqxGrid('showsortmenuitems');
        }
    }
    showgroupmenuitems(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showgroupmenuitems', arg);
        }
        else {
            return this.host.jqxGrid('showgroupmenuitems');
        }
    }
    showrowdetailscolumn(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showrowdetailscolumn', arg);
        }
        else {
            return this.host.jqxGrid('showrowdetailscolumn');
        }
    }
    showheader(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showheader', arg);
        }
        else {
            return this.host.jqxGrid('showheader');
        }
    }
    showgroupsheader(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showgroupsheader', arg);
        }
        else {
            return this.host.jqxGrid('showgroupsheader');
        }
    }
    showaggregates(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showaggregates', arg);
        }
        else {
            return this.host.jqxGrid('showaggregates');
        }
    }
    showgroupaggregates(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showgroupaggregates', arg);
        }
        else {
            return this.host.jqxGrid('showgroupaggregates');
        }
    }
    showeverpresentrow(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showeverpresentrow', arg);
        }
        else {
            return this.host.jqxGrid('showeverpresentrow');
        }
    }
    showfilterrow(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showfilterrow', arg);
        }
        else {
            return this.host.jqxGrid('showfilterrow');
        }
    }
    showemptyrow(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showemptyrow', arg);
        }
        else {
            return this.host.jqxGrid('showemptyrow');
        }
    }
    showstatusbar(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showstatusbar', arg);
        }
        else {
            return this.host.jqxGrid('showstatusbar');
        }
    }
    statusbarheight(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('statusbarheight', arg);
        }
        else {
            return this.host.jqxGrid('statusbarheight');
        }
    }
    showtoolbar(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showtoolbar', arg);
        }
        else {
            return this.host.jqxGrid('showtoolbar');
        }
    }
    showfilterbar(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('showfilterbar', arg);
        }
        else {
            return this.host.jqxGrid('showfilterbar');
        }
    }
    filterbarmode(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('filterbarmode', arg);
        }
        else {
            return this.host.jqxGrid('filterbarmode');
        }
    }
    selectionmode(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('selectionmode', arg);
        }
        else {
            return this.host.jqxGrid('selectionmode');
        }
    }
    updatefilterconditions(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('updatefilterconditions', arg);
        }
        else {
            return this.host.jqxGrid('updatefilterconditions');
        }
    }
    updatefilterpanel(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('updatefilterpanel', arg);
        }
        else {
            return this.host.jqxGrid('updatefilterpanel');
        }
    }
    theme(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('theme', arg);
        }
        else {
            return this.host.jqxGrid('theme');
        }
    }
    toolbarheight(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('toolbarheight', arg);
        }
        else {
            return this.host.jqxGrid('toolbarheight');
        }
    }
    autoheight(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('autoheight', arg);
        }
        else {
            return this.host.jqxGrid('autoheight');
        }
    }
    autorowheight(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('autorowheight', arg);
        }
        else {
            return this.host.jqxGrid('autorowheight');
        }
    }
    columnsheight(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('columnsheight', arg);
        }
        else {
            return this.host.jqxGrid('columnsheight');
        }
    }
    deferreddatafields(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('deferreddatafields', arg);
        }
        else {
            return this.host.jqxGrid('deferreddatafields');
        }
    }
    groupsheaderheight(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('groupsheaderheight', arg);
        }
        else {
            return this.host.jqxGrid('groupsheaderheight');
        }
    }
    groupindentwidth(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('groupindentwidth', arg);
        }
        else {
            return this.host.jqxGrid('groupindentwidth');
        }
    }
    height(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('height', arg);
        }
        else {
            return this.host.jqxGrid('height');
        }
    }
    pagerheight(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('pagerheight', arg);
        }
        else {
            return this.host.jqxGrid('pagerheight');
        }
    }
    rowsheight(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('rowsheight', arg);
        }
        else {
            return this.host.jqxGrid('rowsheight');
        }
    }
    scrollbarsize(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('scrollbarsize', arg);
        }
        else {
            return this.host.jqxGrid('scrollbarsize');
        }
    }
    scrollmode(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('scrollmode', arg);
        }
        else {
            return this.host.jqxGrid('scrollmode');
        }
    }
    scrollfeedback(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('scrollfeedback', arg);
        }
        else {
            return this.host.jqxGrid('scrollfeedback');
        }
    }
    width(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('width', arg);
        }
        else {
            return this.host.jqxGrid('width');
        }
    }
    autosavestate(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('autosavestate', arg);
        }
        else {
            return this.host.jqxGrid('autosavestate');
        }
    }
    autoloadstate(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('autoloadstate', arg);
        }
        else {
            return this.host.jqxGrid('autoloadstate');
        }
    }
    columns(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('columns', arg);
        }
        else {
            return this.host.jqxGrid('columns');
        }
    }
    enableSanitize(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('enableSanitize', arg);
        }
        else {
            return this.host.jqxGrid('enableSanitize');
        }
    }
    cardview(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('cardview', arg);
        }
        else {
            return this.host.jqxGrid('cardview');
        }
    }
    cardviewcolumns(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('cardviewcolumns', arg);
        }
        else {
            return this.host.jqxGrid('cardviewcolumns');
        }
    }
    cardheight(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('cardheight', arg);
        }
        else {
            return this.host.jqxGrid('cardheight');
        }
    }
    cardsize(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('cardsize', arg);
        }
        else {
            return this.host.jqxGrid('cardsize');
        }
    }
    columngroups(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('columngroups', arg);
        }
        else {
            return this.host.jqxGrid('columngroups');
        }
    }
    columnsmenu(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('columnsmenu', arg);
        }
        else {
            return this.host.jqxGrid('columnsmenu');
        }
    }
    columnsresize(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('columnsresize', arg);
        }
        else {
            return this.host.jqxGrid('columnsresize');
        }
    }
    columnsautoresize(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('columnsautoresize', arg);
        }
        else {
            return this.host.jqxGrid('columnsautoresize');
        }
    }
    columnsreorder(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('columnsreorder', arg);
        }
        else {
            return this.host.jqxGrid('columnsreorder');
        }
    }
    charting(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('charting', arg);
        }
        else {
            return this.host.jqxGrid('charting');
        }
    }
    disabled(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('disabled', arg);
        }
        else {
            return this.host.jqxGrid('disabled');
        }
    }
    editable(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('editable', arg);
        }
        else {
            return this.host.jqxGrid('editable');
        }
    }
    batcheditable(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('batcheditable', arg);
        }
        else {
            return this.host.jqxGrid('batcheditable');
        }
    }
    editmode(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('editmode', arg);
        }
        else {
            return this.host.jqxGrid('editmode');
        }
    }
    filter(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('filter', arg);
        }
        else {
            return this.host.jqxGrid('filter');
        }
    }
    filterable(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('filterable', arg);
        }
        else {
            return this.host.jqxGrid('filterable');
        }
    }
    groupable(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('groupable', arg);
        }
        else {
            return this.host.jqxGrid('groupable');
        }
    }
    groups(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('groups', arg);
        }
        else {
            return this.host.jqxGrid('groups');
        }
    }
    horizontalscrollbarstep(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('horizontalscrollbarstep', arg);
        }
        else {
            return this.host.jqxGrid('horizontalscrollbarstep');
        }
    }
    horizontalscrollbarlargestep(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('horizontalscrollbarlargestep', arg);
        }
        else {
            return this.host.jqxGrid('horizontalscrollbarlargestep');
        }
    }
    initrowdetails(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('initrowdetails', arg);
        }
        else {
            return this.host.jqxGrid('initrowdetails');
        }
    }
    keyboardnavigation(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('keyboardnavigation', arg);
        }
        else {
            return this.host.jqxGrid('keyboardnavigation');
        }
    }
    localization(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('localization', arg);
        }
        else {
            return this.host.jqxGrid('localization');
        }
    }
    pagesize(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('pagesize', arg);
        }
        else {
            return this.host.jqxGrid('pagesize');
        }
    }
    pagesizeoptions(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('pagesizeoptions', arg);
        }
        else {
            return this.host.jqxGrid('pagesizeoptions');
        }
    }
    pagermode(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('pagermode', arg);
        }
        else {
            return this.host.jqxGrid('pagermode');
        }
    }
    pagerbuttonscount(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('pagerbuttonscount', arg);
        }
        else {
            return this.host.jqxGrid('pagerbuttonscount');
        }
    }
    pageable(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('pageable', arg);
        }
        else {
            return this.host.jqxGrid('pageable');
        }
    }
    autofill(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('autofill', arg);
        }
        else {
            return this.host.jqxGrid('autofill');
        }
    }
    rowdetails(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('rowdetails', arg);
        }
        else {
            return this.host.jqxGrid('rowdetails');
        }
    }
    rowdetailstemplate(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('rowdetailstemplate', arg);
        }
        else {
            return this.host.jqxGrid('rowdetailstemplate');
        }
    }
    ready(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('ready', arg);
        }
        else {
            return this.host.jqxGrid('ready');
        }
    }
    rendered(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('rendered', arg);
        }
        else {
            return this.host.jqxGrid('rendered');
        }
    }
    renderstatusbar(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('renderstatusbar', arg);
        }
        else {
            return this.host.jqxGrid('renderstatusbar');
        }
    }
    rendertoolbar(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('rendertoolbar', arg);
        }
        else {
            return this.host.jqxGrid('rendertoolbar');
        }
    }
    rendergridrows(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('rendergridrows', arg);
        }
        else {
            return this.host.jqxGrid('rendergridrows');
        }
    }
    sortable(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('sortable', arg);
        }
        else {
            return this.host.jqxGrid('sortable');
        }
    }
    sortmode(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('sortmode', arg);
        }
        else {
            return this.host.jqxGrid('sortmode');
        }
    }
    selectedrowindex(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('selectedrowindex', arg);
        }
        else {
            return this.host.jqxGrid('selectedrowindex');
        }
    }
    selectedrowindexes(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('selectedrowindexes', arg);
        }
        else {
            return this.host.jqxGrid('selectedrowindexes');
        }
    }
    source(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('source', arg);
        }
        else {
            return this.host.jqxGrid('source');
        }
    }
    sorttogglestates(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('sorttogglestates', arg);
        }
        else {
            return this.host.jqxGrid('sorttogglestates');
        }
    }
    updatedelay(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('updatedelay', arg);
        }
        else {
            return this.host.jqxGrid('updatedelay');
        }
    }
    virtualmode(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('virtualmode', arg);
        }
        else {
            return this.host.jqxGrid('virtualmode');
        }
    }
    verticalscrollbarstep(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('verticalscrollbarstep', arg);
        }
        else {
            return this.host.jqxGrid('verticalscrollbarstep');
        }
    }
    verticalscrollbarlargestep(arg) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        if (arg !== undefined) {
            this.host.jqxGrid('verticalscrollbarlargestep', arg);
        }
        else {
            return this.host.jqxGrid('verticalscrollbarlargestep');
        }
    }
    // jqxGridComponent functions
    autoresizecolumns(type) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('autoresizecolumns', type);
    }
    autoresizecolumn(dataField, type) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('autoresizecolumn', dataField, type);
    }
    beginupdate() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('beginupdate');
    }
    clear() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('clear');
    }
    createChart(type, dataSource) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('createChart', type, dataSource);
    }
    destroy() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('destroy');
    }
    endupdate() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('endupdate');
    }
    ensurerowvisible(rowBoundIndex) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('ensurerowvisible', rowBoundIndex);
    }
    focus() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('focus');
    }
    getcolumnindex(dataField) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getcolumnindex', dataField);
    }
    getcolumn(dataField) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getcolumn', dataField);
    }
    getcolumnproperty(dataField, propertyName) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getcolumnproperty', dataField, propertyName);
    }
    getrowid(rowBoundIndex) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getrowid', rowBoundIndex);
    }
    getrowdata(rowBoundIndex) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getrowdata', rowBoundIndex);
    }
    getrowdatabyid(rowID) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getrowdatabyid', rowID);
    }
    getrowboundindexbyid(rowID) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getrowboundindexbyid', rowID);
    }
    getrowboundindex(rowDisplayIndex) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getrowboundindex', rowDisplayIndex);
    }
    getrows() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getrows');
    }
    getboundrows() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getboundrows');
    }
    getdisplayrows() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getdisplayrows');
    }
    getdatainformation() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getdatainformation');
    }
    getsortinformation() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getsortinformation');
    }
    getpaginginformation() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getpaginginformation');
    }
    hidecolumn(dataField) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('hidecolumn', dataField);
    }
    hideloadelement() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('hideloadelement');
    }
    hiderowdetails(rowBoundIndex) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('hiderowdetails', rowBoundIndex);
    }
    iscolumnvisible(dataField) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('iscolumnvisible', dataField);
    }
    iscolumnpinned(dataField) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('iscolumnpinned', dataField);
    }
    localizestrings(localizationobject) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('localizestrings', localizationobject);
    }
    pincolumn(dataField) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('pincolumn', dataField);
    }
    refreshdata() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('refreshdata');
    }
    refresh() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('refresh');
    }
    render() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('render');
    }
    scrolloffset(top, left) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('scrolloffset', top, left);
    }
    scrollposition() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('scrollposition');
    }
    showloadelement() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('showloadelement');
    }
    showrowdetails(rowBoundIndex) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('showrowdetails', rowBoundIndex);
    }
    setcolumnindex(dataField, index) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('setcolumnindex', dataField, index);
    }
    setcolumnproperty(dataField, propertyName, propertyValue) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('setcolumnproperty', dataField, propertyName, propertyValue);
    }
    showcolumn(dataField) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('showcolumn', dataField);
    }
    unpincolumn(dataField) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('unpincolumn', dataField);
    }
    updatebounddata(type) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('updatebounddata', type);
    }
    updating() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('updating');
    }
    getsortcolumn() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getsortcolumn');
    }
    removesort() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('removesort');
    }
    sortby(dataField, sortOrder) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('sortby', dataField, sortOrder);
    }
    addgroup(dataField) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('addgroup', dataField);
    }
    cleargroups() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('cleargroups');
    }
    collapsegroup(group) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('collapsegroup', group);
    }
    collapseallgroups() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('collapseallgroups');
    }
    expandallgroups() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('expandallgroups');
    }
    expandgroup(group) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('expandgroup', group);
    }
    getrootgroupscount() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getrootgroupscount');
    }
    getgroup(groupIndex) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getgroup', groupIndex);
    }
    insertgroup(groupIndex, dataField) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('insertgroup', groupIndex, dataField);
    }
    iscolumngroupable() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('iscolumngroupable');
    }
    removegroupat(groupIndex) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('removegroupat', groupIndex);
    }
    removegroup(dataField) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('removegroup', dataField);
    }
    addfilter(dataField, filterGroup, refreshGrid) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('addfilter', dataField, filterGroup, refreshGrid);
    }
    applyfilters() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('applyfilters');
    }
    clearfilters() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('clearfilters');
    }
    getfilterinformation() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getfilterinformation');
    }
    getcolumnat(index) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getcolumnat', index);
    }
    removefilter(dataField, refreshGrid) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('removefilter', dataField, refreshGrid);
    }
    refreshfilterrow() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('refreshfilterrow');
    }
    gotopage(pagenumber) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('gotopage', pagenumber);
    }
    gotoprevpage() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('gotoprevpage');
    }
    gotonextpage() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('gotonextpage');
    }
    addrow(rowIds, data, rowPosition) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('addrow', rowIds, data, rowPosition);
    }
    begincelledit(rowBoundIndex, dataField) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('begincelledit', rowBoundIndex, dataField);
    }
    beginrowedit(rowBoundIndex) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('beginrowedit', rowBoundIndex);
    }
    closemenu() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('closemenu');
    }
    deleterow(rowIds) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('deleterow', rowIds);
    }
    endcelledit(rowBoundIndex, dataField, confirmChanges) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('endcelledit', rowBoundIndex, dataField, confirmChanges);
    }
    endrowedit(rowBoundIndex, confirmChanges) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('endrowedit', rowBoundIndex, confirmChanges);
    }
    getcell(rowBoundIndex, datafield) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getcell', rowBoundIndex, datafield);
    }
    getcellatposition(left, top) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getcellatposition', left, top);
    }
    getcelltext(rowBoundIndex, dataField) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getcelltext', rowBoundIndex, dataField);
    }
    getcelltextbyid(rowID, dataField) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getcelltextbyid', rowID, dataField);
    }
    getcellvaluebyid(rowID, dataField) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getcellvaluebyid', rowID, dataField);
    }
    getcellvalue(rowBoundIndex, dataField) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getcellvalue', rowBoundIndex, dataField);
    }
    isBindingCompleted() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('isBindingCompleted');
    }
    openmenu(dataField) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('openmenu', dataField);
    }
    setcellvalue(rowBoundIndex, dataField, value) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('setcellvalue', rowBoundIndex, dataField, value);
    }
    setcellvaluebyid(rowID, dataField, value) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('setcellvaluebyid', rowID, dataField, value);
    }
    showvalidationpopup(rowBoundIndex, dataField, validationMessage) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('showvalidationpopup', rowBoundIndex, dataField, validationMessage);
    }
    updaterow(rowIds, data) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('updaterow', rowIds, data);
    }
    clearselection() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('clearselection');
    }
    getselectedrowindex() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getselectedrowindex');
    }
    getselectedrowindexes() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getselectedrowindexes');
    }
    getselectedcell() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getselectedcell');
    }
    getselectedcells() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getselectedcells');
    }
    selectcell(rowBoundIndex, dataField) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('selectcell', rowBoundIndex, dataField);
    }
    selectallrows() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('selectallrows');
    }
    selectrow(rowBoundIndex) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('selectrow', rowBoundIndex);
    }
    unselectrow(rowBoundIndex) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('unselectrow', rowBoundIndex);
    }
    unselectcell(rowBoundIndex, dataField) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('unselectcell', rowBoundIndex, dataField);
    }
    getcolumnaggregateddata(dataField, aggregates) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getcolumnaggregateddata', dataField, aggregates);
    }
    refreshaggregates() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('refreshaggregates');
    }
    renderaggregates() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('renderaggregates');
    }
    exportdata(dataType, fileName, exportHeader, rows, exportHiddenColumns, serverURL, charSet) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('exportdata', dataType, fileName, exportHeader, rows, exportHiddenColumns, serverURL, charSet);
    }
    exportview(dataType, fileName) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('exportview', dataType, fileName);
    }
    openColumnChooser(columns, header) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('openColumnChooser', columns, header);
    }
    getstate() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('getstate');
    }
    loadstate(stateobject) {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        this.host.jqxGrid('loadstate', stateobject);
    }
    savestate() {
        if (this.autoCreate && !this.host) {
            this.createComponent();
        }
        return this.host.jqxGrid('savestate');
    }
    __wireEvents__() {
        this.host.on('bindingcomplete', (eventData) => { this.onBindingcomplete.emit(eventData); });
        this.host.on('columnresized', (eventData) => { this.onColumnresized.emit(eventData); });
        this.host.on('columnreordered', (eventData) => { this.onColumnreordered.emit(eventData); });
        this.host.on('columnclick', (eventData) => { this.onColumnclick.emit(eventData); });
        this.host.on('cellclick', (eventData) => { this.onCellclick.emit(eventData); });
        this.host.on('celldoubleclick', (eventData) => { this.onCelldoubleclick.emit(eventData); });
        this.host.on('cellselect', (eventData) => { this.onCellselect.emit(eventData); });
        this.host.on('cellunselect', (eventData) => { this.onCellunselect.emit(eventData); });
        this.host.on('cellvaluechanged', (eventData) => { this.onCellvaluechanged.emit(eventData); });
        this.host.on('cellbeginedit', (eventData) => { this.onCellbeginedit.emit(eventData); });
        this.host.on('cellendedit', (eventData) => { this.onCellendedit.emit(eventData); });
        this.host.on('filter', (eventData) => { this.onFilter.emit(eventData); });
        this.host.on('groupschanged', (eventData) => { this.onGroupschanged.emit(eventData); });
        this.host.on('groupexpand', (eventData) => { this.onGroupexpand.emit(eventData); });
        this.host.on('groupcollapse', (eventData) => { this.onGroupcollapse.emit(eventData); });
        this.host.on('pagechanged', (eventData) => { this.onPagechanged.emit(eventData); });
        this.host.on('pagesizechanged', (eventData) => { this.onPagesizechanged.emit(eventData); });
        this.host.on('rowclick', (eventData) => { this.onRowclick.emit(eventData); });
        this.host.on('rowdoubleclick', (eventData) => { this.onRowdoubleclick.emit(eventData); });
        this.host.on('rowselect', (eventData) => { this.onRowselect.emit(eventData); });
        this.host.on('rowunselect', (eventData) => { this.onRowunselect.emit(eventData); });
        this.host.on('rowexpand', (eventData) => { this.onRowexpand.emit(eventData); });
        this.host.on('rowcollapse', (eventData) => { this.onRowcollapse.emit(eventData); });
        this.host.on('sort', (eventData) => { this.onSort.emit(eventData); });
    }
}
jqxGridComponent.Éµfac = function jqxGridComponent_Factory(t) { return new (t || jqxGridComponent)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef)); };
jqxGridComponent.Éµcmp = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineComponent({ type: jqxGridComponent, selectors: [["jqxGrid"]], inputs: { autoCreate: ["auto-create", "autoCreate"], attrAltrows: ["altrows", "attrAltrows"], attrAltstart: ["altstart", "attrAltstart"], attrAltstep: ["altstep", "attrAltstep"], attrAutoshowloadelement: ["autoshowloadelement", "attrAutoshowloadelement"], attrAutoshowfiltericon: ["autoshowfiltericon", "attrAutoshowfiltericon"], attrAutoshowcolumnsmenubutton: ["autoshowcolumnsmenubutton", "attrAutoshowcolumnsmenubutton"], attrShowcolumnlines: ["showcolumnlines", "attrShowcolumnlines"], attrShowrowlines: ["showrowlines", "attrShowrowlines"], attrShowcolumnheaderlines: ["showcolumnheaderlines", "attrShowcolumnheaderlines"], attrAdaptive: ["adaptive", "attrAdaptive"], attrAdaptivewidth: ["adaptivewidth", "attrAdaptivewidth"], attrClipboard: ["clipboard", "attrClipboard"], attrCloseablegroups: ["closeablegroups", "attrCloseablegroups"], attrColumnsmenuwidth: ["columnsmenuwidth", "attrColumnsmenuwidth"], attrColumnmenuopening: ["columnmenuopening", "attrColumnmenuopening"], attrColumnmenuclosing: ["columnmenuclosing", "attrColumnmenuclosing"], attrCellhover: ["cellhover", "attrCellhover"], attrEnablekeyboarddelete: ["enablekeyboarddelete", "attrEnablekeyboarddelete"], attrEnableellipsis: ["enableellipsis", "attrEnableellipsis"], attrEnablemousewheel: ["enablemousewheel", "attrEnablemousewheel"], attrEnableanimations: ["enableanimations", "attrEnableanimations"], attrEnabletooltips: ["enabletooltips", "attrEnabletooltips"], attrEnablehover: ["enablehover", "attrEnablehover"], attrEnablebrowserselection: ["enablebrowserselection", "attrEnablebrowserselection"], attrEverpresentrowposition: ["everpresentrowposition", "attrEverpresentrowposition"], attrEverpresentrowheight: ["everpresentrowheight", "attrEverpresentrowheight"], attrEverpresentrowactions: ["everpresentrowactions", "attrEverpresentrowactions"], attrEverpresentrowactionsmode: ["everpresentrowactionsmode", "attrEverpresentrowactionsmode"], attrFilterrowheight: ["filterrowheight", "attrFilterrowheight"], attrFiltermode: ["filtermode", "attrFiltermode"], attrGroupsrenderer: ["groupsrenderer", "attrGroupsrenderer"], attrGroupcolumnrenderer: ["groupcolumnrenderer", "attrGroupcolumnrenderer"], attrGroupsexpandedbydefault: ["groupsexpandedbydefault", "attrGroupsexpandedbydefault"], attrHandlekeyboardnavigation: ["handlekeyboardnavigation", "attrHandlekeyboardnavigation"], attrPagerrenderer: ["pagerrenderer", "attrPagerrenderer"], attrRtl: ["rtl", "attrRtl"], attrShowdefaultloadelement: ["showdefaultloadelement", "attrShowdefaultloadelement"], attrShowfiltercolumnbackground: ["showfiltercolumnbackground", "attrShowfiltercolumnbackground"], attrShowfiltermenuitems: ["showfiltermenuitems", "attrShowfiltermenuitems"], attrShowpinnedcolumnbackground: ["showpinnedcolumnbackground", "attrShowpinnedcolumnbackground"], attrShowsortcolumnbackground: ["showsortcolumnbackground", "attrShowsortcolumnbackground"], attrShowsortmenuitems: ["showsortmenuitems", "attrShowsortmenuitems"], attrShowgroupmenuitems: ["showgroupmenuitems", "attrShowgroupmenuitems"], attrShowrowdetailscolumn: ["showrowdetailscolumn", "attrShowrowdetailscolumn"], attrShowheader: ["showheader", "attrShowheader"], attrShowgroupsheader: ["showgroupsheader", "attrShowgroupsheader"], attrShowaggregates: ["showaggregates", "attrShowaggregates"], attrShowgroupaggregates: ["showgroupaggregates", "attrShowgroupaggregates"], attrShoweverpresentrow: ["showeverpresentrow", "attrShoweverpresentrow"], attrShowfilterrow: ["showfilterrow", "attrShowfilterrow"], attrShowemptyrow: ["showemptyrow", "attrShowemptyrow"], attrShowstatusbar: ["showstatusbar", "attrShowstatusbar"], attrStatusbarheight: ["statusbarheight", "attrStatusbarheight"], attrShowtoolbar: ["showtoolbar", "attrShowtoolbar"], attrShowfilterbar: ["showfilterbar", "attrShowfilterbar"], attrFilterbarmode: ["filterbarmode", "attrFilterbarmode"], attrSelectionmode: ["selectionmode", "attrSelectionmode"], attrUpdatefilterconditions: ["updatefilterconditions", "attrUpdatefilterconditions"], attrUpdatefilterpanel: ["updatefilterpanel", "attrUpdatefilterpanel"], attrTheme: ["theme", "attrTheme"], attrToolbarheight: ["toolbarheight", "attrToolbarheight"], attrAutoheight: ["autoheight", "attrAutoheight"], attrAutorowheight: ["autorowheight", "attrAutorowheight"], attrColumnsheight: ["columnsheight", "attrColumnsheight"], attrDeferreddatafields: ["deferreddatafields", "attrDeferreddatafields"], attrGroupsheaderheight: ["groupsheaderheight", "attrGroupsheaderheight"], attrGroupindentwidth: ["groupindentwidth", "attrGroupindentwidth"], attrPagerheight: ["pagerheight", "attrPagerheight"], attrRowsheight: ["rowsheight", "attrRowsheight"], attrScrollbarsize: ["scrollbarsize", "attrScrollbarsize"], attrScrollmode: ["scrollmode", "attrScrollmode"], attrScrollfeedback: ["scrollfeedback", "attrScrollfeedback"], attrAutosavestate: ["autosavestate", "attrAutosavestate"], attrAutoloadstate: ["autoloadstate", "attrAutoloadstate"], attrColumns: ["columns", "attrColumns"], attrEnableSanitize: ["enableSanitize", "attrEnableSanitize"], attrCardview: ["cardview", "attrCardview"], attrCardviewcolumns: ["cardviewcolumns", "attrCardviewcolumns"], attrCardheight: ["cardheight", "attrCardheight"], attrCardsize: ["cardsize", "attrCardsize"], attrColumngroups: ["columngroups", "attrColumngroups"], attrColumnsmenu: ["columnsmenu", "attrColumnsmenu"], attrColumnsresize: ["columnsresize", "attrColumnsresize"], attrColumnsautoresize: ["columnsautoresize", "attrColumnsautoresize"], attrColumnsreorder: ["columnsreorder", "attrColumnsreorder"], attrCharting: ["charting", "attrCharting"], attrDisabled: ["disabled", "attrDisabled"], attrEditable: ["editable", "attrEditable"], attrBatcheditable: ["batcheditable", "attrBatcheditable"], attrEditmode: ["editmode", "attrEditmode"], attrFilter: ["filter", "attrFilter"], attrFilterable: ["filterable", "attrFilterable"], attrGroupable: ["groupable", "attrGroupable"], attrGroups: ["groups", "attrGroups"], attrHorizontalscrollbarstep: ["horizontalscrollbarstep", "attrHorizontalscrollbarstep"], attrHorizontalscrollbarlargestep: ["horizontalscrollbarlargestep", "attrHorizontalscrollbarlargestep"], attrInitrowdetails: ["initrowdetails", "attrInitrowdetails"], attrKeyboardnavigation: ["keyboardnavigation", "attrKeyboardnavigation"], attrLocalization: ["localization", "attrLocalization"], attrPagesize: ["pagesize", "attrPagesize"], attrPagesizeoptions: ["pagesizeoptions", "attrPagesizeoptions"], attrPagermode: ["pagermode", "attrPagermode"], attrPagerbuttonscount: ["pagerbuttonscount", "attrPagerbuttonscount"], attrPageable: ["pageable", "attrPageable"], attrAutofill: ["autofill", "attrAutofill"], attrRowdetails: ["rowdetails", "attrRowdetails"], attrRowdetailstemplate: ["rowdetailstemplate", "attrRowdetailstemplate"], attrReady: ["ready", "attrReady"], attrRendered: ["rendered", "attrRendered"], attrRenderstatusbar: ["renderstatusbar", "attrRenderstatusbar"], attrRendertoolbar: ["rendertoolbar", "attrRendertoolbar"], attrRendergridrows: ["rendergridrows", "attrRendergridrows"], attrSortable: ["sortable", "attrSortable"], attrSortmode: ["sortmode", "attrSortmode"], attrSelectedrowindex: ["selectedrowindex", "attrSelectedrowindex"], attrSelectedrowindexes: ["selectedrowindexes", "attrSelectedrowindexes"], attrSource: ["source", "attrSource"], attrSorttogglestates: ["sorttogglestates", "attrSorttogglestates"], attrUpdatedelay: ["updatedelay", "attrUpdatedelay"], attrVirtualmode: ["virtualmode", "attrVirtualmode"], attrVerticalscrollbarstep: ["verticalscrollbarstep", "attrVerticalscrollbarstep"], attrVerticalscrollbarlargestep: ["verticalscrollbarlargestep", "attrVerticalscrollbarlargestep"], attrWidth: ["width", "attrWidth"], attrHeight: ["height", "attrHeight"] }, outputs: { onBindingcomplete: "onBindingcomplete", onColumnresized: "onColumnresized", onColumnreordered: "onColumnreordered", onColumnclick: "onColumnclick", onCellclick: "onCellclick", onCelldoubleclick: "onCelldoubleclick", onCellselect: "onCellselect", onCellunselect: "onCellunselect", onCellvaluechanged: "onCellvaluechanged", onCellbeginedit: "onCellbeginedit", onCellendedit: "onCellendedit", onFilter: "onFilter", onGroupschanged: "onGroupschanged", onGroupexpand: "onGroupexpand", onGroupcollapse: "onGroupcollapse", onPagechanged: "onPagechanged", onPagesizechanged: "onPagesizechanged", onRowclick: "onRowclick", onRowdoubleclick: "onRowdoubleclick", onRowselect: "onRowselect", onRowunselect: "onRowunselect", onRowexpand: "onRowexpand", onRowcollapse: "onRowcollapse", onSort: "onSort" }, features: [Éµngcc0.ÉµÉµNgOnChangesFeature], ngContentSelectors: _c0, decls: 2, vars: 0, template: function jqxGridComponent_Template(rf, ctx) { if (rf & 1) {
        Éµngcc0.ÉµÉµprojectionDef();
        Éµngcc0.ÉµÉµelementStart(0, "div");
        Éµngcc0.ÉµÉµprojection(1);
        Éµngcc0.ÉµÉµelementEnd();
    } }, encapsulation: 2 });
jqxGridComponent.ctorParameters = () => [
    { type: ElementRef }
];
jqxGridComponent.propDecorators = {
    attrAltrows: [{ type: Input, args: ['altrows',] }],
    attrAltstart: [{ type: Input, args: ['altstart',] }],
    attrAltstep: [{ type: Input, args: ['altstep',] }],
    attrAutoshowloadelement: [{ type: Input, args: ['autoshowloadelement',] }],
    attrAutoshowfiltericon: [{ type: Input, args: ['autoshowfiltericon',] }],
    attrAutoshowcolumnsmenubutton: [{ type: Input, args: ['autoshowcolumnsmenubutton',] }],
    attrShowcolumnlines: [{ type: Input, args: ['showcolumnlines',] }],
    attrShowrowlines: [{ type: Input, args: ['showrowlines',] }],
    attrShowcolumnheaderlines: [{ type: Input, args: ['showcolumnheaderlines',] }],
    attrAdaptive: [{ type: Input, args: ['adaptive',] }],
    attrAdaptivewidth: [{ type: Input, args: ['adaptivewidth',] }],
    attrClipboard: [{ type: Input, args: ['clipboard',] }],
    attrCloseablegroups: [{ type: Input, args: ['closeablegroups',] }],
    attrColumnsmenuwidth: [{ type: Input, args: ['columnsmenuwidth',] }],
    attrColumnmenuopening: [{ type: Input, args: ['columnmenuopening',] }],
    attrColumnmenuclosing: [{ type: Input, args: ['columnmenuclosing',] }],
    attrCellhover: [{ type: Input, args: ['cellhover',] }],
    attrEnablekeyboarddelete: [{ type: Input, args: ['enablekeyboarddelete',] }],
    attrEnableellipsis: [{ type: Input, args: ['enableellipsis',] }],
    attrEnablemousewheel: [{ type: Input, args: ['enablemousewheel',] }],
    attrEnableanimations: [{ type: Input, args: ['enableanimations',] }],
    attrEnabletooltips: [{ type: Input, args: ['enabletooltips',] }],
    attrEnablehover: [{ type: Input, args: ['enablehover',] }],
    attrEnablebrowserselection: [{ type: Input, args: ['enablebrowserselection',] }],
    attrEverpresentrowposition: [{ type: Input, args: ['everpresentrowposition',] }],
    attrEverpresentrowheight: [{ type: Input, args: ['everpresentrowheight',] }],
    attrEverpresentrowactions: [{ type: Input, args: ['everpresentrowactions',] }],
    attrEverpresentrowactionsmode: [{ type: Input, args: ['everpresentrowactionsmode',] }],
    attrFilterrowheight: [{ type: Input, args: ['filterrowheight',] }],
    attrFiltermode: [{ type: Input, args: ['filtermode',] }],
    attrGroupsrenderer: [{ type: Input, args: ['groupsrenderer',] }],
    attrGroupcolumnrenderer: [{ type: Input, args: ['groupcolumnrenderer',] }],
    attrGroupsexpandedbydefault: [{ type: Input, args: ['groupsexpandedbydefault',] }],
    attrHandlekeyboardnavigation: [{ type: Input, args: ['handlekeyboardnavigation',] }],
    attrPagerrenderer: [{ type: Input, args: ['pagerrenderer',] }],
    attrRtl: [{ type: Input, args: ['rtl',] }],
    attrShowdefaultloadelement: [{ type: Input, args: ['showdefaultloadelement',] }],
    attrShowfiltercolumnbackground: [{ type: Input, args: ['showfiltercolumnbackground',] }],
    attrShowfiltermenuitems: [{ type: Input, args: ['showfiltermenuitems',] }],
    attrShowpinnedcolumnbackground: [{ type: Input, args: ['showpinnedcolumnbackground',] }],
    attrShowsortcolumnbackground: [{ type: Input, args: ['showsortcolumnbackground',] }],
    attrShowsortmenuitems: [{ type: Input, args: ['showsortmenuitems',] }],
    attrShowgroupmenuitems: [{ type: Input, args: ['showgroupmenuitems',] }],
    attrShowrowdetailscolumn: [{ type: Input, args: ['showrowdetailscolumn',] }],
    attrShowheader: [{ type: Input, args: ['showheader',] }],
    attrShowgroupsheader: [{ type: Input, args: ['showgroupsheader',] }],
    attrShowaggregates: [{ type: Input, args: ['showaggregates',] }],
    attrShowgroupaggregates: [{ type: Input, args: ['showgroupaggregates',] }],
    attrShoweverpresentrow: [{ type: Input, args: ['showeverpresentrow',] }],
    attrShowfilterrow: [{ type: Input, args: ['showfilterrow',] }],
    attrShowemptyrow: [{ type: Input, args: ['showemptyrow',] }],
    attrShowstatusbar: [{ type: Input, args: ['showstatusbar',] }],
    attrStatusbarheight: [{ type: Input, args: ['statusbarheight',] }],
    attrShowtoolbar: [{ type: Input, args: ['showtoolbar',] }],
    attrShowfilterbar: [{ type: Input, args: ['showfilterbar',] }],
    attrFilterbarmode: [{ type: Input, args: ['filterbarmode',] }],
    attrSelectionmode: [{ type: Input, args: ['selectionmode',] }],
    attrUpdatefilterconditions: [{ type: Input, args: ['updatefilterconditions',] }],
    attrUpdatefilterpanel: [{ type: Input, args: ['updatefilterpanel',] }],
    attrTheme: [{ type: Input, args: ['theme',] }],
    attrToolbarheight: [{ type: Input, args: ['toolbarheight',] }],
    attrAutoheight: [{ type: Input, args: ['autoheight',] }],
    attrAutorowheight: [{ type: Input, args: ['autorowheight',] }],
    attrColumnsheight: [{ type: Input, args: ['columnsheight',] }],
    attrDeferreddatafields: [{ type: Input, args: ['deferreddatafields',] }],
    attrGroupsheaderheight: [{ type: Input, args: ['groupsheaderheight',] }],
    attrGroupindentwidth: [{ type: Input, args: ['groupindentwidth',] }],
    attrPagerheight: [{ type: Input, args: ['pagerheight',] }],
    attrRowsheight: [{ type: Input, args: ['rowsheight',] }],
    attrScrollbarsize: [{ type: Input, args: ['scrollbarsize',] }],
    attrScrollmode: [{ type: Input, args: ['scrollmode',] }],
    attrScrollfeedback: [{ type: Input, args: ['scrollfeedback',] }],
    attrAutosavestate: [{ type: Input, args: ['autosavestate',] }],
    attrAutoloadstate: [{ type: Input, args: ['autoloadstate',] }],
    attrColumns: [{ type: Input, args: ['columns',] }],
    attrEnableSanitize: [{ type: Input, args: ['enableSanitize',] }],
    attrCardview: [{ type: Input, args: ['cardview',] }],
    attrCardviewcolumns: [{ type: Input, args: ['cardviewcolumns',] }],
    attrCardheight: [{ type: Input, args: ['cardheight',] }],
    attrCardsize: [{ type: Input, args: ['cardsize',] }],
    attrColumngroups: [{ type: Input, args: ['columngroups',] }],
    attrColumnsmenu: [{ type: Input, args: ['columnsmenu',] }],
    attrColumnsresize: [{ type: Input, args: ['columnsresize',] }],
    attrColumnsautoresize: [{ type: Input, args: ['columnsautoresize',] }],
    attrColumnsreorder: [{ type: Input, args: ['columnsreorder',] }],
    attrCharting: [{ type: Input, args: ['charting',] }],
    attrDisabled: [{ type: Input, args: ['disabled',] }],
    attrEditable: [{ type: Input, args: ['editable',] }],
    attrBatcheditable: [{ type: Input, args: ['batcheditable',] }],
    attrEditmode: [{ type: Input, args: ['editmode',] }],
    attrFilter: [{ type: Input, args: ['filter',] }],
    attrFilterable: [{ type: Input, args: ['filterable',] }],
    attrGroupable: [{ type: Input, args: ['groupable',] }],
    attrGroups: [{ type: Input, args: ['groups',] }],
    attrHorizontalscrollbarstep: [{ type: Input, args: ['horizontalscrollbarstep',] }],
    attrHorizontalscrollbarlargestep: [{ type: Input, args: ['horizontalscrollbarlargestep',] }],
    attrInitrowdetails: [{ type: Input, args: ['initrowdetails',] }],
    attrKeyboardnavigation: [{ type: Input, args: ['keyboardnavigation',] }],
    attrLocalization: [{ type: Input, args: ['localization',] }],
    attrPagesize: [{ type: Input, args: ['pagesize',] }],
    attrPagesizeoptions: [{ type: Input, args: ['pagesizeoptions',] }],
    attrPagermode: [{ type: Input, args: ['pagermode',] }],
    attrPagerbuttonscount: [{ type: Input, args: ['pagerbuttonscount',] }],
    attrPageable: [{ type: Input, args: ['pageable',] }],
    attrAutofill: [{ type: Input, args: ['autofill',] }],
    attrRowdetails: [{ type: Input, args: ['rowdetails',] }],
    attrRowdetailstemplate: [{ type: Input, args: ['rowdetailstemplate',] }],
    attrReady: [{ type: Input, args: ['ready',] }],
    attrRendered: [{ type: Input, args: ['rendered',] }],
    attrRenderstatusbar: [{ type: Input, args: ['renderstatusbar',] }],
    attrRendertoolbar: [{ type: Input, args: ['rendertoolbar',] }],
    attrRendergridrows: [{ type: Input, args: ['rendergridrows',] }],
    attrSortable: [{ type: Input, args: ['sortable',] }],
    attrSortmode: [{ type: Input, args: ['sortmode',] }],
    attrSelectedrowindex: [{ type: Input, args: ['selectedrowindex',] }],
    attrSelectedrowindexes: [{ type: Input, args: ['selectedrowindexes',] }],
    attrSource: [{ type: Input, args: ['source',] }],
    attrSorttogglestates: [{ type: Input, args: ['sorttogglestates',] }],
    attrUpdatedelay: [{ type: Input, args: ['updatedelay',] }],
    attrVirtualmode: [{ type: Input, args: ['virtualmode',] }],
    attrVerticalscrollbarstep: [{ type: Input, args: ['verticalscrollbarstep',] }],
    attrVerticalscrollbarlargestep: [{ type: Input, args: ['verticalscrollbarlargestep',] }],
    attrWidth: [{ type: Input, args: ['width',] }],
    attrHeight: [{ type: Input, args: ['height',] }],
    autoCreate: [{ type: Input, args: ['auto-create',] }],
    onBindingcomplete: [{ type: Output }],
    onColumnresized: [{ type: Output }],
    onColumnreordered: [{ type: Output }],
    onColumnclick: [{ type: Output }],
    onCellclick: [{ type: Output }],
    onCelldoubleclick: [{ type: Output }],
    onCellselect: [{ type: Output }],
    onCellunselect: [{ type: Output }],
    onCellvaluechanged: [{ type: Output }],
    onCellbeginedit: [{ type: Output }],
    onCellendedit: [{ type: Output }],
    onFilter: [{ type: Output }],
    onGroupschanged: [{ type: Output }],
    onGroupexpand: [{ type: Output }],
    onGroupcollapse: [{ type: Output }],
    onPagechanged: [{ type: Output }],
    onPagesizechanged: [{ type: Output }],
    onRowclick: [{ type: Output }],
    onRowdoubleclick: [{ type: Output }],
    onRowselect: [{ type: Output }],
    onRowunselect: [{ type: Output }],
    onRowexpand: [{ type: Output }],
    onRowcollapse: [{ type: Output }],
    onSort: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(jqxGridComponent, [{
        type: Component,
        args: [{
                selector: 'jqxGrid',
                template: '<div><ng-content></ng-content></div>'
            }]
    }], function () { return [{ type: Éµngcc0.ElementRef }]; }, { autoCreate: [{
            type: Input,
            args: ['auto-create']
        }], onBindingcomplete: [{
            type: Output
        }], onColumnresized: [{
            type: Output
        }], onColumnreordered: [{
            type: Output
        }], onColumnclick: [{
            type: Output
        }], onCellclick: [{
            type: Output
        }], onCelldoubleclick: [{
            type: Output
        }], onCellselect: [{
            type: Output
        }], onCellunselect: [{
            type: Output
        }], onCellvaluechanged: [{
            type: Output
        }], onCellbeginedit: [{
            type: Output
        }], onCellendedit: [{
            type: Output
        }], onFilter: [{
            type: Output
        }], onGroupschanged: [{
            type: Output
        }], onGroupexpand: [{
            type: Output
        }], onGroupcollapse: [{
            type: Output
        }], onPagechanged: [{
            type: Output
        }], onPagesizechanged: [{
            type: Output
        }], onRowclick: [{
            type: Output
        }], onRowdoubleclick: [{
            type: Output
        }], onRowselect: [{
            type: Output
        }], onRowunselect: [{
            type: Output
        }], onRowexpand: [{
            type: Output
        }], onRowcollapse: [{
            type: Output
        }], onSort: [{
            type: Output
        }], attrAltrows: [{
            type: Input,
            args: ['altrows']
        }], attrAltstart: [{
            type: Input,
            args: ['altstart']
        }], attrAltstep: [{
            type: Input,
            args: ['altstep']
        }], attrAutoshowloadelement: [{
            type: Input,
            args: ['autoshowloadelement']
        }], attrAutoshowfiltericon: [{
            type: Input,
            args: ['autoshowfiltericon']
        }], attrAutoshowcolumnsmenubutton: [{
            type: Input,
            args: ['autoshowcolumnsmenubutton']
        }], attrShowcolumnlines: [{
            type: Input,
            args: ['showcolumnlines']
        }], attrShowrowlines: [{
            type: Input,
            args: ['showrowlines']
        }], attrShowcolumnheaderlines: [{
            type: Input,
            args: ['showcolumnheaderlines']
        }], attrAdaptive: [{
            type: Input,
            args: ['adaptive']
        }], attrAdaptivewidth: [{
            type: Input,
            args: ['adaptivewidth']
        }], attrClipboard: [{
            type: Input,
            args: ['clipboard']
        }], attrCloseablegroups: [{
            type: Input,
            args: ['closeablegroups']
        }], attrColumnsmenuwidth: [{
            type: Input,
            args: ['columnsmenuwidth']
        }], attrColumnmenuopening: [{
            type: Input,
            args: ['columnmenuopening']
        }], attrColumnmenuclosing: [{
            type: Input,
            args: ['columnmenuclosing']
        }], attrCellhover: [{
            type: Input,
            args: ['cellhover']
        }], attrEnablekeyboarddelete: [{
            type: Input,
            args: ['enablekeyboarddelete']
        }], attrEnableellipsis: [{
            type: Input,
            args: ['enableellipsis']
        }], attrEnablemousewheel: [{
            type: Input,
            args: ['enablemousewheel']
        }], attrEnableanimations: [{
            type: Input,
            args: ['enableanimations']
        }], attrEnabletooltips: [{
            type: Input,
            args: ['enabletooltips']
        }], attrEnablehover: [{
            type: Input,
            args: ['enablehover']
        }], attrEnablebrowserselection: [{
            type: Input,
            args: ['enablebrowserselection']
        }], attrEverpresentrowposition: [{
            type: Input,
            args: ['everpresentrowposition']
        }], attrEverpresentrowheight: [{
            type: Input,
            args: ['everpresentrowheight']
        }], attrEverpresentrowactions: [{
            type: Input,
            args: ['everpresentrowactions']
        }], attrEverpresentrowactionsmode: [{
            type: Input,
            args: ['everpresentrowactionsmode']
        }], attrFilterrowheight: [{
            type: Input,
            args: ['filterrowheight']
        }], attrFiltermode: [{
            type: Input,
            args: ['filtermode']
        }], attrGroupsrenderer: [{
            type: Input,
            args: ['groupsrenderer']
        }], attrGroupcolumnrenderer: [{
            type: Input,
            args: ['groupcolumnrenderer']
        }], attrGroupsexpandedbydefault: [{
            type: Input,
            args: ['groupsexpandedbydefault']
        }], attrHandlekeyboardnavigation: [{
            type: Input,
            args: ['handlekeyboardnavigation']
        }], attrPagerrenderer: [{
            type: Input,
            args: ['pagerrenderer']
        }], attrRtl: [{
            type: Input,
            args: ['rtl']
        }], attrShowdefaultloadelement: [{
            type: Input,
            args: ['showdefaultloadelement']
        }], attrShowfiltercolumnbackground: [{
            type: Input,
            args: ['showfiltercolumnbackground']
        }], attrShowfiltermenuitems: [{
            type: Input,
            args: ['showfiltermenuitems']
        }], attrShowpinnedcolumnbackground: [{
            type: Input,
            args: ['showpinnedcolumnbackground']
        }], attrShowsortcolumnbackground: [{
            type: Input,
            args: ['showsortcolumnbackground']
        }], attrShowsortmenuitems: [{
            type: Input,
            args: ['showsortmenuitems']
        }], attrShowgroupmenuitems: [{
            type: Input,
            args: ['showgroupmenuitems']
        }], attrShowrowdetailscolumn: [{
            type: Input,
            args: ['showrowdetailscolumn']
        }], attrShowheader: [{
            type: Input,
            args: ['showheader']
        }], attrShowgroupsheader: [{
            type: Input,
            args: ['showgroupsheader']
        }], attrShowaggregates: [{
            type: Input,
            args: ['showaggregates']
        }], attrShowgroupaggregates: [{
            type: Input,
            args: ['showgroupaggregates']
        }], attrShoweverpresentrow: [{
            type: Input,
            args: ['showeverpresentrow']
        }], attrShowfilterrow: [{
            type: Input,
            args: ['showfilterrow']
        }], attrShowemptyrow: [{
            type: Input,
            args: ['showemptyrow']
        }], attrShowstatusbar: [{
            type: Input,
            args: ['showstatusbar']
        }], attrStatusbarheight: [{
            type: Input,
            args: ['statusbarheight']
        }], attrShowtoolbar: [{
            type: Input,
            args: ['showtoolbar']
        }], attrShowfilterbar: [{
            type: Input,
            args: ['showfilterbar']
        }], attrFilterbarmode: [{
            type: Input,
            args: ['filterbarmode']
        }], attrSelectionmode: [{
            type: Input,
            args: ['selectionmode']
        }], attrUpdatefilterconditions: [{
            type: Input,
            args: ['updatefilterconditions']
        }], attrUpdatefilterpanel: [{
            type: Input,
            args: ['updatefilterpanel']
        }], attrTheme: [{
            type: Input,
            args: ['theme']
        }], attrToolbarheight: [{
            type: Input,
            args: ['toolbarheight']
        }], attrAutoheight: [{
            type: Input,
            args: ['autoheight']
        }], attrAutorowheight: [{
            type: Input,
            args: ['autorowheight']
        }], attrColumnsheight: [{
            type: Input,
            args: ['columnsheight']
        }], attrDeferreddatafields: [{
            type: Input,
            args: ['deferreddatafields']
        }], attrGroupsheaderheight: [{
            type: Input,
            args: ['groupsheaderheight']
        }], attrGroupindentwidth: [{
            type: Input,
            args: ['groupindentwidth']
        }], attrPagerheight: [{
            type: Input,
            args: ['pagerheight']
        }], attrRowsheight: [{
            type: Input,
            args: ['rowsheight']
        }], attrScrollbarsize: [{
            type: Input,
            args: ['scrollbarsize']
        }], attrScrollmode: [{
            type: Input,
            args: ['scrollmode']
        }], attrScrollfeedback: [{
            type: Input,
            args: ['scrollfeedback']
        }], attrAutosavestate: [{
            type: Input,
            args: ['autosavestate']
        }], attrAutoloadstate: [{
            type: Input,
            args: ['autoloadstate']
        }], attrColumns: [{
            type: Input,
            args: ['columns']
        }], attrEnableSanitize: [{
            type: Input,
            args: ['enableSanitize']
        }], attrCardview: [{
            type: Input,
            args: ['cardview']
        }], attrCardviewcolumns: [{
            type: Input,
            args: ['cardviewcolumns']
        }], attrCardheight: [{
            type: Input,
            args: ['cardheight']
        }], attrCardsize: [{
            type: Input,
            args: ['cardsize']
        }], attrColumngroups: [{
            type: Input,
            args: ['columngroups']
        }], attrColumnsmenu: [{
            type: Input,
            args: ['columnsmenu']
        }], attrColumnsresize: [{
            type: Input,
            args: ['columnsresize']
        }], attrColumnsautoresize: [{
            type: Input,
            args: ['columnsautoresize']
        }], attrColumnsreorder: [{
            type: Input,
            args: ['columnsreorder']
        }], attrCharting: [{
            type: Input,
            args: ['charting']
        }], attrDisabled: [{
            type: Input,
            args: ['disabled']
        }], attrEditable: [{
            type: Input,
            args: ['editable']
        }], attrBatcheditable: [{
            type: Input,
            args: ['batcheditable']
        }], attrEditmode: [{
            type: Input,
            args: ['editmode']
        }], attrFilter: [{
            type: Input,
            args: ['filter']
        }], attrFilterable: [{
            type: Input,
            args: ['filterable']
        }], attrGroupable: [{
            type: Input,
            args: ['groupable']
        }], attrGroups: [{
            type: Input,
            args: ['groups']
        }], attrHorizontalscrollbarstep: [{
            type: Input,
            args: ['horizontalscrollbarstep']
        }], attrHorizontalscrollbarlargestep: [{
            type: Input,
            args: ['horizontalscrollbarlargestep']
        }], attrInitrowdetails: [{
            type: Input,
            args: ['initrowdetails']
        }], attrKeyboardnavigation: [{
            type: Input,
            args: ['keyboardnavigation']
        }], attrLocalization: [{
            type: Input,
            args: ['localization']
        }], attrPagesize: [{
            type: Input,
            args: ['pagesize']
        }], attrPagesizeoptions: [{
            type: Input,
            args: ['pagesizeoptions']
        }], attrPagermode: [{
            type: Input,
            args: ['pagermode']
        }], attrPagerbuttonscount: [{
            type: Input,
            args: ['pagerbuttonscount']
        }], attrPageable: [{
            type: Input,
            args: ['pageable']
        }], attrAutofill: [{
            type: Input,
            args: ['autofill']
        }], attrRowdetails: [{
            type: Input,
            args: ['rowdetails']
        }], attrRowdetailstemplate: [{
            type: Input,
            args: ['rowdetailstemplate']
        }], attrReady: [{
            type: Input,
            args: ['ready']
        }], attrRendered: [{
            type: Input,
            args: ['rendered']
        }], attrRenderstatusbar: [{
            type: Input,
            args: ['renderstatusbar']
        }], attrRendertoolbar: [{
            type: Input,
            args: ['rendertoolbar']
        }], attrRendergridrows: [{
            type: Input,
            args: ['rendergridrows']
        }], attrSortable: [{
            type: Input,
            args: ['sortable']
        }], attrSortmode: [{
            type: Input,
            args: ['sortmode']
        }], attrSelectedrowindex: [{
            type: Input,
            args: ['selectedrowindex']
        }], attrSelectedrowindexes: [{
            type: Input,
            args: ['selectedrowindexes']
        }], attrSource: [{
            type: Input,
            args: ['source']
        }], attrSorttogglestates: [{
            type: Input,
            args: ['sorttogglestates']
        }], attrUpdatedelay: [{
            type: Input,
            args: ['updatedelay']
        }], attrVirtualmode: [{
            type: Input,
            args: ['virtualmode']
        }], attrVerticalscrollbarstep: [{
            type: Input,
            args: ['verticalscrollbarstep']
        }], attrVerticalscrollbarlargestep: [{
            type: Input,
            args: ['verticalscrollbarlargestep']
        }], attrWidth: [{
            type: Input,
            args: ['width']
        }], attrHeight: [{
            type: Input,
            args: ['height']
        }] }); })();

class jqxGridModule {
}
jqxGridModule.Éµfac = function jqxGridModule_Factory(t) { return new (t || jqxGridModule)(); };
jqxGridModule.Éµmod = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineNgModule({ type: jqxGridModule });
jqxGridModule.Éµinj = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjector({ imports: [[]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(jqxGridModule, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [jqxGridComponent],
                exports: [jqxGridComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(jqxGridModule, { declarations: [jqxGridComponent], exports: [jqxGridComponent] }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { jqxGridComponent, jqxGridModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianF3aWRnZXRzLW5nLWpxeGdyaWQuanMiLCJzb3VyY2VzIjpbImpxd2lkZ2V0cy1uZy1qcXhncmlkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs2QkFNRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQ0Y7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7b0xBT0U7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4uL2pxd2lkZ2V0cy9qcXhjb3JlJztcbmltcG9ydCAnLi4vanF3aWRnZXRzL2pxeGRhdGEnO1xuaW1wb3J0ICcuLi9qcXdpZGdldHMvanF4ZGF0YS5leHBvcnQnO1xuaW1wb3J0ICcuLi9qcXdpZGdldHMvanF4YnV0dG9ucyc7XG5pbXBvcnQgJy4uL2pxd2lkZ2V0cy9qcXhidXR0b25ncm91cCc7XG5pbXBvcnQgJy4uL2pxd2lkZ2V0cy9qcXhzY3JvbGxiYXInO1xuaW1wb3J0ICcuLi9qcXdpZGdldHMvanF4bWVudSc7XG5pbXBvcnQgJy4uL2pxd2lkZ2V0cy9qcXhsaXN0Ym94JztcbmltcG9ydCAnLi4vanF3aWRnZXRzL2pxeGRyb3Bkb3dubGlzdCc7XG5pbXBvcnQgJy4uL2pxd2lkZ2V0cy9qcXhjb21ib2JveCc7XG5pbXBvcnQgJy4uL2pxd2lkZ2V0cy9qcXhudW1iZXJpbnB1dCc7XG5pbXBvcnQgJy4uL2pxd2lkZ2V0cy9qcXhjaGVja2JveCc7XG5pbXBvcnQgJy4uL2pxd2lkZ2V0cy9nbG9iYWxpemF0aW9uL2dsb2JhbGl6ZSc7XG5pbXBvcnQgJy4uL2pxd2lkZ2V0cy9qcXhjYWxlbmRhcic7XG5pbXBvcnQgJy4uL2pxd2lkZ2V0cy9qcXhkYXRldGltZWlucHV0JztcbmltcG9ydCAnLi4vanF3aWRnZXRzL2pxeGdyaWQnO1xuaW1wb3J0ICcuLi9qcXdpZGdldHMvanF4Z3JpZC5lZGl0JztcbmltcG9ydCAnLi4vanF3aWRnZXRzL2pxeGdyaWQucGFnZXInO1xuaW1wb3J0ICcuLi9qcXdpZGdldHMvanF4Z3JpZC5zZWxlY3Rpb24nO1xuaW1wb3J0ICcuLi9qcXdpZGdldHMvanF4Z3JpZC5maWx0ZXInO1xuaW1wb3J0ICcuLi9qcXdpZGdldHMvanF4Z3JpZC5zb3J0JztcbmltcG9ydCAnLi4vanF3aWRnZXRzL2pxeGdyaWQuc3RvcmFnZSc7XG5pbXBvcnQgJy4uL2pxd2lkZ2V0cy9qcXhncmlkLmdyb3VwaW5nJztcbmltcG9ydCAnLi4vanF3aWRnZXRzL2pxeGdyaWQuZXhwb3J0JztcbmltcG9ydCAnLi4vanF3aWRnZXRzL2pxeGdyaWQuY29sdW1uc3Jlc2l6ZSc7XG5pbXBvcnQgJy4uL2pxd2lkZ2V0cy9qcXhncmlkLmNvbHVtbnNyZW9yZGVyJztcbmltcG9ydCAnLi4vanF3aWRnZXRzL2pxeGdyaWQuYWdncmVnYXRlcyc7XG5pbXBvcnQgJy4uL2pxd2lkZ2V0cy9qcXhncmlkLmNoYXJ0JztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgT3V0cHV0LCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vanF3aWRnZXRzLmQudHNcIiAvPlxyXG5jbGFzcyBqcXhHcmlkQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lckVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLmF1dG9DcmVhdGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucHJvcGVydGllcyA9IFsnYWx0cm93cycsICdhbHRzdGFydCcsICdhbHRzdGVwJywgJ2F1dG9zaG93bG9hZGVsZW1lbnQnLCAnYXV0b3Nob3dmaWx0ZXJpY29uJywgJ2F1dG9zaG93Y29sdW1uc21lbnVidXR0b24nLCAnc2hvd2NvbHVtbmxpbmVzJywgJ3Nob3dyb3dsaW5lcycsICdzaG93Y29sdW1uaGVhZGVybGluZXMnLCAnYWRhcHRpdmUnLCAnYWRhcHRpdmV3aWR0aCcsICdjbGlwYm9hcmQnLCAnY2xvc2VhYmxlZ3JvdXBzJywgJ2NvbHVtbnNtZW51d2lkdGgnLCAnY29sdW1ubWVudW9wZW5pbmcnLCAnY29sdW1ubWVudWNsb3NpbmcnLCAnY2VsbGhvdmVyJywgJ2VuYWJsZWtleWJvYXJkZGVsZXRlJywgJ2VuYWJsZWVsbGlwc2lzJywgJ2VuYWJsZW1vdXNld2hlZWwnLCAnZW5hYmxlYW5pbWF0aW9ucycsICdlbmFibGV0b29sdGlwcycsICdlbmFibGVob3ZlcicsICdlbmFibGVicm93c2Vyc2VsZWN0aW9uJywgJ2V2ZXJwcmVzZW50cm93cG9zaXRpb24nLCAnZXZlcnByZXNlbnRyb3doZWlnaHQnLCAnZXZlcnByZXNlbnRyb3dhY3Rpb25zJywgJ2V2ZXJwcmVzZW50cm93YWN0aW9uc21vZGUnLCAnZmlsdGVycm93aGVpZ2h0JywgJ2ZpbHRlcm1vZGUnLCAnZ3JvdXBzcmVuZGVyZXInLCAnZ3JvdXBjb2x1bW5yZW5kZXJlcicsICdncm91cHNleHBhbmRlZGJ5ZGVmYXVsdCcsICdoYW5kbGVrZXlib2FyZG5hdmlnYXRpb24nLCAncGFnZXJyZW5kZXJlcicsICdydGwnLCAnc2hvd2RlZmF1bHRsb2FkZWxlbWVudCcsICdzaG93ZmlsdGVyY29sdW1uYmFja2dyb3VuZCcsICdzaG93ZmlsdGVybWVudWl0ZW1zJywgJ3Nob3dwaW5uZWRjb2x1bW5iYWNrZ3JvdW5kJywgJ3Nob3dzb3J0Y29sdW1uYmFja2dyb3VuZCcsICdzaG93c29ydG1lbnVpdGVtcycsICdzaG93Z3JvdXBtZW51aXRlbXMnLCAnc2hvd3Jvd2RldGFpbHNjb2x1bW4nLCAnc2hvd2hlYWRlcicsICdzaG93Z3JvdXBzaGVhZGVyJywgJ3Nob3dhZ2dyZWdhdGVzJywgJ3Nob3dncm91cGFnZ3JlZ2F0ZXMnLCAnc2hvd2V2ZXJwcmVzZW50cm93JywgJ3Nob3dmaWx0ZXJyb3cnLCAnc2hvd2VtcHR5cm93JywgJ3Nob3dzdGF0dXNiYXInLCAnc3RhdHVzYmFyaGVpZ2h0JywgJ3Nob3d0b29sYmFyJywgJ3Nob3dmaWx0ZXJiYXInLCAnZmlsdGVyYmFybW9kZScsICdzZWxlY3Rpb25tb2RlJywgJ3VwZGF0ZWZpbHRlcmNvbmRpdGlvbnMnLCAndXBkYXRlZmlsdGVycGFuZWwnLCAndGhlbWUnLCAndG9vbGJhcmhlaWdodCcsICdhdXRvaGVpZ2h0JywgJ2F1dG9yb3doZWlnaHQnLCAnY29sdW1uc2hlaWdodCcsICdkZWZlcnJlZGRhdGFmaWVsZHMnLCAnZ3JvdXBzaGVhZGVyaGVpZ2h0JywgJ2dyb3VwaW5kZW50d2lkdGgnLCAnaGVpZ2h0JywgJ3BhZ2VyaGVpZ2h0JywgJ3Jvd3NoZWlnaHQnLCAnc2Nyb2xsYmFyc2l6ZScsICdzY3JvbGxtb2RlJywgJ3Njcm9sbGZlZWRiYWNrJywgJ3dpZHRoJywgJ2F1dG9zYXZlc3RhdGUnLCAnYXV0b2xvYWRzdGF0ZScsICdjb2x1bW5zJywgJ2VuYWJsZVNhbml0aXplJywgJ2NhcmR2aWV3JywgJ2NhcmR2aWV3Y29sdW1ucycsICdjYXJkaGVpZ2h0JywgJ2NhcmRzaXplJywgJ2NvbHVtbmdyb3VwcycsICdjb2x1bW5zbWVudScsICdjb2x1bW5zcmVzaXplJywgJ2NvbHVtbnNhdXRvcmVzaXplJywgJ2NvbHVtbnNyZW9yZGVyJywgJ2NoYXJ0aW5nJywgJ2Rpc2FibGVkJywgJ2VkaXRhYmxlJywgJ2JhdGNoZWRpdGFibGUnLCAnZWRpdG1vZGUnLCAnZmlsdGVyJywgJ2ZpbHRlcmFibGUnLCAnZ3JvdXBhYmxlJywgJ2dyb3VwcycsICdob3Jpem9udGFsc2Nyb2xsYmFyc3RlcCcsICdob3Jpem9udGFsc2Nyb2xsYmFybGFyZ2VzdGVwJywgJ2luaXRyb3dkZXRhaWxzJywgJ2tleWJvYXJkbmF2aWdhdGlvbicsICdsb2NhbGl6YXRpb24nLCAncGFnZXNpemUnLCAncGFnZXNpemVvcHRpb25zJywgJ3BhZ2VybW9kZScsICdwYWdlcmJ1dHRvbnNjb3VudCcsICdwYWdlYWJsZScsICdhdXRvZmlsbCcsICdyb3dkZXRhaWxzJywgJ3Jvd2RldGFpbHN0ZW1wbGF0ZScsICdyZWFkeScsICdyZW5kZXJlZCcsICdyZW5kZXJzdGF0dXNiYXInLCAncmVuZGVydG9vbGJhcicsICdyZW5kZXJncmlkcm93cycsICdzb3J0YWJsZScsICdzb3J0bW9kZScsICdzZWxlY3RlZHJvd2luZGV4JywgJ3NlbGVjdGVkcm93aW5kZXhlcycsICdzb3VyY2UnLCAnc29ydHRvZ2dsZXN0YXRlcycsICd1cGRhdGVkZWxheScsICd2aXJ0dWFsbW9kZScsICd2ZXJ0aWNhbHNjcm9sbGJhcnN0ZXAnLCAndmVydGljYWxzY3JvbGxiYXJsYXJnZXN0ZXAnXTtcclxuICAgICAgICAvLyBqcXhHcmlkQ29tcG9uZW50IGV2ZW50c1xyXG4gICAgICAgIHRoaXMub25CaW5kaW5nY29tcGxldGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5vbkNvbHVtbnJlc2l6ZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5vbkNvbHVtbnJlb3JkZXJlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgICAgICB0aGlzLm9uQ29sdW1uY2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5vbkNlbGxjbGljayA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgICAgICB0aGlzLm9uQ2VsbGRvdWJsZWNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgICAgIHRoaXMub25DZWxsc2VsZWN0ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgICAgIHRoaXMub25DZWxsdW5zZWxlY3QgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5vbkNlbGx2YWx1ZWNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5vbkNlbGxiZWdpbmVkaXQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5vbkNlbGxlbmRlZGl0ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgICAgIHRoaXMub25GaWx0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5vbkdyb3Vwc2NoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5vbkdyb3VwZXhwYW5kID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgICAgIHRoaXMub25Hcm91cGNvbGxhcHNlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgICAgIHRoaXMub25QYWdlY2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgICAgICB0aGlzLm9uUGFnZXNpemVjaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgICAgIHRoaXMub25Sb3djbGljayA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgICAgICB0aGlzLm9uUm93ZG91YmxlY2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5vblJvd3NlbGVjdCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgICAgICB0aGlzLm9uUm93dW5zZWxlY3QgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5vblJvd2V4cGFuZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgICAgICB0aGlzLm9uUm93Y29sbGFwc2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5vblNvcnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50UmVmID0gY29udGFpbmVyRWxlbWVudDtcclxuICAgIH1cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgfVxyXG4gICAgO1xyXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIGxldCBjaGlsZHJlbiA9IEpRWExpdGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW4pLmZpbmQoJ3RyJyk7XHJcbiAgICAgICAgbGV0IGh0bWwgPSAnJztcclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHt9O1xyXG4gICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIGh0bWwgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5pbm5lckhUTUwgPSBodG1sO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQgPSBodG1sO1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gSlFYTGl0ZS5qcXgucGFyc2VTb3VyY2VUYWcodGhpcy5jb250YWluZXIpO1xyXG4gICAgICAgICAgICBpZiAodGhpc1snYXR0ckNvbHVtbnMnXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICA7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zWydzb3VyY2UnXSA9IHJlc3VsdC5zb3VyY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zWydzb3VyY2UnXSA9IHJlc3VsdC5zb3VyY2U7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zWydjb2x1bW5zJ10gPSByZXN1bHQuY29sdW1ucztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KG9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIDtcclxuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5jb250YWluZXIpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudCAhPT0gdGhpcy5jb250YWluZXIuaW5uZXJIVE1MKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQgPSB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gSlFYTGl0ZS5qcXgucGFyc2VTb3VyY2VUYWcodGhpcy5jb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbHVtbnMgPSB0aGlzLmhvc3QuanF4R3JpZCgnY29sdW1ucycpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoeyBzb3VyY2U6IHJlc3VsdC5zb3VyY2UsIGNvbHVtbnM6IHJlc3VsdC5jb2x1bW5zIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoeyBzb3VyY2U6IHJlc3VsdC5zb3VyY2UgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICA7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGF0dHJOYW1lID0gJ2F0dHInICsgdGhpcy5wcm9wZXJ0aWVzW2ldLnN1YnN0cmluZygwLCAxKS50b1VwcGVyQ2FzZSgpICsgdGhpcy5wcm9wZXJ0aWVzW2ldLnN1YnN0cmluZygxKTtcclxuICAgICAgICAgICAgICAgIGxldCBhcmVFcXVhbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXNbYXR0ck5hbWVdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXNbYXR0ck5hbWVdID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1thdHRyTmFtZV0gaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJlRXF1YWwgPSB0aGlzLmFycmF5c0VxdWFsKHRoaXNbYXR0ck5hbWVdLCB0aGlzLmhvc3QuanF4R3JpZCh0aGlzLnByb3BlcnRpZXNbaV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJlRXF1YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCh0aGlzLnByb3BlcnRpZXNbaV0sIHRoaXNbYXR0ck5hbWVdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW2F0dHJOYW1lXSAhPT0gdGhpcy5ob3N0LmpxeEdyaWQodGhpcy5wcm9wZXJ0aWVzW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCh0aGlzLnByb3BlcnRpZXNbaV0sIHRoaXNbYXR0ck5hbWVdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhcnJheXNFcXVhbChhdHRyVmFsdWUsIGhvc3RWYWx1ZSkge1xyXG4gICAgICAgIGlmICgoYXR0clZhbHVlICYmICFob3N0VmFsdWUpIHx8ICghYXR0clZhbHVlICYmIGhvc3RWYWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXR0clZhbHVlLmxlbmd0aCAhPSBob3N0VmFsdWUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyVmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGF0dHJWYWx1ZVtpXSAhPT0gaG9zdFZhbHVlW2ldKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBtYW5hZ2VBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgIGxldCBvcHRpb25zID0ge307XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGF0dHJOYW1lID0gJ2F0dHInICsgdGhpcy5wcm9wZXJ0aWVzW2ldLnN1YnN0cmluZygwLCAxKS50b1VwcGVyQ2FzZSgpICsgdGhpcy5wcm9wZXJ0aWVzW2ldLnN1YnN0cmluZygxKTtcclxuICAgICAgICAgICAgaWYgKHRoaXNbYXR0ck5hbWVdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnNbdGhpcy5wcm9wZXJ0aWVzW2ldXSA9IHRoaXNbYXR0ck5hbWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xyXG4gICAgfVxyXG4gICAgbW92ZUNsYXNzZXMocGFyZW50RWwsIGNoaWxkRWwpIHtcclxuICAgICAgICBsZXQgY2xhc3NlcyA9IHBhcmVudEVsLmNsYXNzTGlzdDtcclxuICAgICAgICBpZiAoY2xhc3Nlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNoaWxkRWwuY2xhc3NMaXN0LmFkZCguLi5jbGFzc2VzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGFyZW50RWwuY2xhc3NOYW1lID0gJyc7XHJcbiAgICB9XHJcbiAgICBtb3ZlU3R5bGVzKHBhcmVudEVsLCBjaGlsZEVsKSB7XHJcbiAgICAgICAgbGV0IHN0eWxlID0gcGFyZW50RWwuc3R5bGUuY3NzVGV4dDtcclxuICAgICAgICBjaGlsZEVsLnN0eWxlLmNzc1RleHQgPSBzdHlsZTtcclxuICAgICAgICBwYXJlbnRFbC5zdHlsZS5jc3NUZXh0ID0gJyc7XHJcbiAgICB9XHJcbiAgICBjcmVhdGVDb21wb25lbnQob3B0aW9ucykge1xyXG4gICAgICAgIGlmICh0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICBKUVhMaXRlLmV4dGVuZChvcHRpb25zLCB0aGlzLm1hbmFnZUF0dHJpYnV0ZXMoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBvcHRpb25zID0gdGhpcy5tYW5hZ2VBdHRyaWJ1dGVzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaG9zdCA9IEpRWExpdGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgdGhpcy5tb3ZlQ2xhc3Nlcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5ob3N0WzBdKTtcclxuICAgICAgICB0aGlzLm1vdmVTdHlsZXModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIHRoaXMuaG9zdFswXSk7XHJcbiAgICAgICAgdGhpcy5fX3dpcmVFdmVudHNfXygpO1xyXG4gICAgICAgIHRoaXMud2lkZ2V0T2JqZWN0ID0ganF3aWRnZXRzLmNyZWF0ZUluc3RhbmNlKHRoaXMuaG9zdCwgJ2pxeEdyaWQnLCBvcHRpb25zKTtcclxuICAgIH1cclxuICAgIGNyZWF0ZVdpZGdldChvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQob3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICBfX3VwZGF0ZVJlY3RfXygpIHtcclxuICAgICAgICBpZiAodGhpcy5ob3N0KVxyXG4gICAgICAgICAgICB0aGlzLmhvc3QuY3NzKHsgd2lkdGg6IHRoaXMuYXR0cldpZHRoLCBoZWlnaHQ6IHRoaXMuYXR0ckhlaWdodCB9KTtcclxuICAgIH1cclxuICAgIHNldE9wdGlvbnMob3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdzZXRPcHRpb25zJywgb3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICAvLyBqcXhHcmlkQ29tcG9uZW50IHByb3BlcnRpZXNcclxuICAgIGFsdHJvd3MoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnYWx0cm93cycsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2FsdHJvd3MnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhbHRzdGFydChhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdhbHRzdGFydCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2FsdHN0YXJ0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYWx0c3RlcChhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdhbHRzdGVwJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnYWx0c3RlcCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGF1dG9zaG93bG9hZGVsZW1lbnQoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnYXV0b3Nob3dsb2FkZWxlbWVudCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2F1dG9zaG93bG9hZGVsZW1lbnQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhdXRvc2hvd2ZpbHRlcmljb24oYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnYXV0b3Nob3dmaWx0ZXJpY29uJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnYXV0b3Nob3dmaWx0ZXJpY29uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYXV0b3Nob3djb2x1bW5zbWVudWJ1dHRvbihhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdhdXRvc2hvd2NvbHVtbnNtZW51YnV0dG9uJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnYXV0b3Nob3djb2x1bW5zbWVudWJ1dHRvbicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNob3djb2x1bW5saW5lcyhhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdzaG93Y29sdW1ubGluZXMnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdzaG93Y29sdW1ubGluZXMnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzaG93cm93bGluZXMoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnc2hvd3Jvd2xpbmVzJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnc2hvd3Jvd2xpbmVzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2hvd2NvbHVtbmhlYWRlcmxpbmVzKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3Nob3djb2x1bW5oZWFkZXJsaW5lcycsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ3Nob3djb2x1bW5oZWFkZXJsaW5lcycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGFkYXB0aXZlKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2FkYXB0aXZlJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnYWRhcHRpdmUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhZGFwdGl2ZXdpZHRoKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2FkYXB0aXZld2lkdGgnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdhZGFwdGl2ZXdpZHRoJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2xpcGJvYXJkKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2NsaXBib2FyZCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2NsaXBib2FyZCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNsb3NlYWJsZWdyb3VwcyhhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdjbG9zZWFibGVncm91cHMnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdjbG9zZWFibGVncm91cHMnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb2x1bW5zbWVudXdpZHRoKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2NvbHVtbnNtZW51d2lkdGgnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdjb2x1bW5zbWVudXdpZHRoJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29sdW1ubWVudW9wZW5pbmcoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnY29sdW1ubWVudW9wZW5pbmcnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdjb2x1bW5tZW51b3BlbmluZycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbHVtbm1lbnVjbG9zaW5nKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2NvbHVtbm1lbnVjbG9zaW5nJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnY29sdW1ubWVudWNsb3NpbmcnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjZWxsaG92ZXIoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnY2VsbGhvdmVyJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnY2VsbGhvdmVyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZW5hYmxla2V5Ym9hcmRkZWxldGUoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnZW5hYmxla2V5Ym9hcmRkZWxldGUnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdlbmFibGVrZXlib2FyZGRlbGV0ZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVuYWJsZWVsbGlwc2lzKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2VuYWJsZWVsbGlwc2lzJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnZW5hYmxlZWxsaXBzaXMnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbmFibGVtb3VzZXdoZWVsKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2VuYWJsZW1vdXNld2hlZWwnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdlbmFibGVtb3VzZXdoZWVsJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZW5hYmxlYW5pbWF0aW9ucyhhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdlbmFibGVhbmltYXRpb25zJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnZW5hYmxlYW5pbWF0aW9ucycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVuYWJsZXRvb2x0aXBzKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2VuYWJsZXRvb2x0aXBzJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnZW5hYmxldG9vbHRpcHMnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbmFibGVob3ZlcihhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdlbmFibGVob3ZlcicsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2VuYWJsZWhvdmVyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZW5hYmxlYnJvd3NlcnNlbGVjdGlvbihhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdlbmFibGVicm93c2Vyc2VsZWN0aW9uJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnZW5hYmxlYnJvd3NlcnNlbGVjdGlvbicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGV2ZXJwcmVzZW50cm93cG9zaXRpb24oYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnZXZlcnByZXNlbnRyb3dwb3NpdGlvbicsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2V2ZXJwcmVzZW50cm93cG9zaXRpb24nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBldmVycHJlc2VudHJvd2hlaWdodChhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdldmVycHJlc2VudHJvd2hlaWdodCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2V2ZXJwcmVzZW50cm93aGVpZ2h0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZXZlcnByZXNlbnRyb3dhY3Rpb25zKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2V2ZXJwcmVzZW50cm93YWN0aW9ucycsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2V2ZXJwcmVzZW50cm93YWN0aW9ucycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGV2ZXJwcmVzZW50cm93YWN0aW9uc21vZGUoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnZXZlcnByZXNlbnRyb3dhY3Rpb25zbW9kZScsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2V2ZXJwcmVzZW50cm93YWN0aW9uc21vZGUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmaWx0ZXJyb3doZWlnaHQoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnZmlsdGVycm93aGVpZ2h0JywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnZmlsdGVycm93aGVpZ2h0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZmlsdGVybW9kZShhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdmaWx0ZXJtb2RlJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnZmlsdGVybW9kZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdyb3Vwc3JlbmRlcmVyKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2dyb3Vwc3JlbmRlcmVyJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnZ3JvdXBzcmVuZGVyZXInKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBncm91cGNvbHVtbnJlbmRlcmVyKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2dyb3VwY29sdW1ucmVuZGVyZXInLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdncm91cGNvbHVtbnJlbmRlcmVyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ3JvdXBzZXhwYW5kZWRieWRlZmF1bHQoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnZ3JvdXBzZXhwYW5kZWRieWRlZmF1bHQnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdncm91cHNleHBhbmRlZGJ5ZGVmYXVsdCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGhhbmRsZWtleWJvYXJkbmF2aWdhdGlvbihhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdoYW5kbGVrZXlib2FyZG5hdmlnYXRpb24nLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdoYW5kbGVrZXlib2FyZG5hdmlnYXRpb24nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwYWdlcnJlbmRlcmVyKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3BhZ2VycmVuZGVyZXInLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdwYWdlcnJlbmRlcmVyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcnRsKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3J0bCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ3J0bCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNob3dkZWZhdWx0bG9hZGVsZW1lbnQoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnc2hvd2RlZmF1bHRsb2FkZWxlbWVudCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ3Nob3dkZWZhdWx0bG9hZGVsZW1lbnQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzaG93ZmlsdGVyY29sdW1uYmFja2dyb3VuZChhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdzaG93ZmlsdGVyY29sdW1uYmFja2dyb3VuZCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ3Nob3dmaWx0ZXJjb2x1bW5iYWNrZ3JvdW5kJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2hvd2ZpbHRlcm1lbnVpdGVtcyhhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdzaG93ZmlsdGVybWVudWl0ZW1zJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnc2hvd2ZpbHRlcm1lbnVpdGVtcycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNob3dwaW5uZWRjb2x1bW5iYWNrZ3JvdW5kKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3Nob3dwaW5uZWRjb2x1bW5iYWNrZ3JvdW5kJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnc2hvd3Bpbm5lZGNvbHVtbmJhY2tncm91bmQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzaG93c29ydGNvbHVtbmJhY2tncm91bmQoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnc2hvd3NvcnRjb2x1bW5iYWNrZ3JvdW5kJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnc2hvd3NvcnRjb2x1bW5iYWNrZ3JvdW5kJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2hvd3NvcnRtZW51aXRlbXMoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnc2hvd3NvcnRtZW51aXRlbXMnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdzaG93c29ydG1lbnVpdGVtcycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNob3dncm91cG1lbnVpdGVtcyhhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdzaG93Z3JvdXBtZW51aXRlbXMnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdzaG93Z3JvdXBtZW51aXRlbXMnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzaG93cm93ZGV0YWlsc2NvbHVtbihhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdzaG93cm93ZGV0YWlsc2NvbHVtbicsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ3Nob3dyb3dkZXRhaWxzY29sdW1uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2hvd2hlYWRlcihhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdzaG93aGVhZGVyJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnc2hvd2hlYWRlcicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNob3dncm91cHNoZWFkZXIoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnc2hvd2dyb3Vwc2hlYWRlcicsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ3Nob3dncm91cHNoZWFkZXInKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzaG93YWdncmVnYXRlcyhhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdzaG93YWdncmVnYXRlcycsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ3Nob3dhZ2dyZWdhdGVzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2hvd2dyb3VwYWdncmVnYXRlcyhhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdzaG93Z3JvdXBhZ2dyZWdhdGVzJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnc2hvd2dyb3VwYWdncmVnYXRlcycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNob3dldmVycHJlc2VudHJvdyhhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdzaG93ZXZlcnByZXNlbnRyb3cnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdzaG93ZXZlcnByZXNlbnRyb3cnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzaG93ZmlsdGVycm93KGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3Nob3dmaWx0ZXJyb3cnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdzaG93ZmlsdGVycm93Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2hvd2VtcHR5cm93KGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3Nob3dlbXB0eXJvdycsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ3Nob3dlbXB0eXJvdycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNob3dzdGF0dXNiYXIoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnc2hvd3N0YXR1c2JhcicsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ3Nob3dzdGF0dXNiYXInKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0dXNiYXJoZWlnaHQoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnc3RhdHVzYmFyaGVpZ2h0JywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnc3RhdHVzYmFyaGVpZ2h0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2hvd3Rvb2xiYXIoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnc2hvd3Rvb2xiYXInLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdzaG93dG9vbGJhcicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNob3dmaWx0ZXJiYXIoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnc2hvd2ZpbHRlcmJhcicsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ3Nob3dmaWx0ZXJiYXInKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmaWx0ZXJiYXJtb2RlKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2ZpbHRlcmJhcm1vZGUnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdmaWx0ZXJiYXJtb2RlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2VsZWN0aW9ubW9kZShhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdzZWxlY3Rpb25tb2RlJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnc2VsZWN0aW9ubW9kZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHVwZGF0ZWZpbHRlcmNvbmRpdGlvbnMoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgndXBkYXRlZmlsdGVyY29uZGl0aW9ucycsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ3VwZGF0ZWZpbHRlcmNvbmRpdGlvbnMnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB1cGRhdGVmaWx0ZXJwYW5lbChhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCd1cGRhdGVmaWx0ZXJwYW5lbCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ3VwZGF0ZWZpbHRlcnBhbmVsJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhlbWUoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgndGhlbWUnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCd0aGVtZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHRvb2xiYXJoZWlnaHQoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgndG9vbGJhcmhlaWdodCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ3Rvb2xiYXJoZWlnaHQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhdXRvaGVpZ2h0KGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2F1dG9oZWlnaHQnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdhdXRvaGVpZ2h0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYXV0b3Jvd2hlaWdodChhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdhdXRvcm93aGVpZ2h0JywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnYXV0b3Jvd2hlaWdodCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbHVtbnNoZWlnaHQoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnY29sdW1uc2hlaWdodCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2NvbHVtbnNoZWlnaHQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkZWZlcnJlZGRhdGFmaWVsZHMoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnZGVmZXJyZWRkYXRhZmllbGRzJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnZGVmZXJyZWRkYXRhZmllbGRzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ3JvdXBzaGVhZGVyaGVpZ2h0KGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2dyb3Vwc2hlYWRlcmhlaWdodCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2dyb3Vwc2hlYWRlcmhlaWdodCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdyb3VwaW5kZW50d2lkdGgoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnZ3JvdXBpbmRlbnR3aWR0aCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2dyb3VwaW5kZW50d2lkdGgnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoZWlnaHQoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnaGVpZ2h0JywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnaGVpZ2h0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcGFnZXJoZWlnaHQoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgncGFnZXJoZWlnaHQnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdwYWdlcmhlaWdodCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJvd3NoZWlnaHQoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgncm93c2hlaWdodCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ3Jvd3NoZWlnaHQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzY3JvbGxiYXJzaXplKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3Njcm9sbGJhcnNpemUnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdzY3JvbGxiYXJzaXplJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2Nyb2xsbW9kZShhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdzY3JvbGxtb2RlJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnc2Nyb2xsbW9kZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNjcm9sbGZlZWRiYWNrKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3Njcm9sbGZlZWRiYWNrJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnc2Nyb2xsZmVlZGJhY2snKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB3aWR0aChhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCd3aWR0aCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ3dpZHRoJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYXV0b3NhdmVzdGF0ZShhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdhdXRvc2F2ZXN0YXRlJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnYXV0b3NhdmVzdGF0ZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGF1dG9sb2Fkc3RhdGUoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnYXV0b2xvYWRzdGF0ZScsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2F1dG9sb2Fkc3RhdGUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb2x1bW5zKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2NvbHVtbnMnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdjb2x1bW5zJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZW5hYmxlU2FuaXRpemUoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnZW5hYmxlU2FuaXRpemUnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdlbmFibGVTYW5pdGl6ZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhcmR2aWV3KGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2NhcmR2aWV3JywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnY2FyZHZpZXcnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXJkdmlld2NvbHVtbnMoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnY2FyZHZpZXdjb2x1bW5zJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnY2FyZHZpZXdjb2x1bW5zJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2FyZGhlaWdodChhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdjYXJkaGVpZ2h0JywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnY2FyZGhlaWdodCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhcmRzaXplKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2NhcmRzaXplJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnY2FyZHNpemUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb2x1bW5ncm91cHMoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnY29sdW1uZ3JvdXBzJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnY29sdW1uZ3JvdXBzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29sdW1uc21lbnUoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnY29sdW1uc21lbnUnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdjb2x1bW5zbWVudScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbHVtbnNyZXNpemUoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnY29sdW1uc3Jlc2l6ZScsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2NvbHVtbnNyZXNpemUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb2x1bW5zYXV0b3Jlc2l6ZShhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdjb2x1bW5zYXV0b3Jlc2l6ZScsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2NvbHVtbnNhdXRvcmVzaXplJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29sdW1uc3Jlb3JkZXIoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnY29sdW1uc3Jlb3JkZXInLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdjb2x1bW5zcmVvcmRlcicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNoYXJ0aW5nKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2NoYXJ0aW5nJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnY2hhcnRpbmcnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkaXNhYmxlZChhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdkaXNhYmxlZCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWRpdGFibGUoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnZWRpdGFibGUnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdlZGl0YWJsZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGJhdGNoZWRpdGFibGUoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnYmF0Y2hlZGl0YWJsZScsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2JhdGNoZWRpdGFibGUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlZGl0bW9kZShhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdlZGl0bW9kZScsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2VkaXRtb2RlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZmlsdGVyKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2ZpbHRlcicsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2ZpbHRlcicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZpbHRlcmFibGUoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnZmlsdGVyYWJsZScsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2ZpbHRlcmFibGUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBncm91cGFibGUoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnZ3JvdXBhYmxlJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnZ3JvdXBhYmxlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ3JvdXBzKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2dyb3VwcycsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2dyb3VwcycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGhvcml6b250YWxzY3JvbGxiYXJzdGVwKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2hvcml6b250YWxzY3JvbGxiYXJzdGVwJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnaG9yaXpvbnRhbHNjcm9sbGJhcnN0ZXAnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBob3Jpem9udGFsc2Nyb2xsYmFybGFyZ2VzdGVwKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2hvcml6b250YWxzY3JvbGxiYXJsYXJnZXN0ZXAnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdob3Jpem9udGFsc2Nyb2xsYmFybGFyZ2VzdGVwJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaW5pdHJvd2RldGFpbHMoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnaW5pdHJvd2RldGFpbHMnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdpbml0cm93ZGV0YWlscycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGtleWJvYXJkbmF2aWdhdGlvbihhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdrZXlib2FyZG5hdmlnYXRpb24nLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdrZXlib2FyZG5hdmlnYXRpb24nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBsb2NhbGl6YXRpb24oYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnbG9jYWxpemF0aW9uJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnbG9jYWxpemF0aW9uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcGFnZXNpemUoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgncGFnZXNpemUnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdwYWdlc2l6ZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHBhZ2VzaXplb3B0aW9ucyhhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdwYWdlc2l6ZW9wdGlvbnMnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdwYWdlc2l6ZW9wdGlvbnMnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwYWdlcm1vZGUoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgncGFnZXJtb2RlJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgncGFnZXJtb2RlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcGFnZXJidXR0b25zY291bnQoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgncGFnZXJidXR0b25zY291bnQnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdwYWdlcmJ1dHRvbnNjb3VudCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHBhZ2VhYmxlKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3BhZ2VhYmxlJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgncGFnZWFibGUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhdXRvZmlsbChhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdhdXRvZmlsbCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2F1dG9maWxsJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcm93ZGV0YWlscyhhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdyb3dkZXRhaWxzJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgncm93ZGV0YWlscycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJvd2RldGFpbHN0ZW1wbGF0ZShhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdyb3dkZXRhaWxzdGVtcGxhdGUnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdyb3dkZXRhaWxzdGVtcGxhdGUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZWFkeShhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdyZWFkeScsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ3JlYWR5Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVuZGVyZWQoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgncmVuZGVyZWQnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdyZW5kZXJlZCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJlbmRlcnN0YXR1c2JhcihhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdyZW5kZXJzdGF0dXNiYXInLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdyZW5kZXJzdGF0dXNiYXInKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZW5kZXJ0b29sYmFyKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3JlbmRlcnRvb2xiYXInLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdyZW5kZXJ0b29sYmFyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVuZGVyZ3JpZHJvd3MoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgncmVuZGVyZ3JpZHJvd3MnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdyZW5kZXJncmlkcm93cycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNvcnRhYmxlKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3NvcnRhYmxlJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnc29ydGFibGUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzb3J0bW9kZShhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdzb3J0bW9kZScsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ3NvcnRtb2RlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2VsZWN0ZWRyb3dpbmRleChhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdzZWxlY3RlZHJvd2luZGV4JywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnc2VsZWN0ZWRyb3dpbmRleCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNlbGVjdGVkcm93aW5kZXhlcyhhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdzZWxlY3RlZHJvd2luZGV4ZXMnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdzZWxlY3RlZHJvd2luZGV4ZXMnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzb3VyY2UoYXJnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnc291cmNlJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnc291cmNlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc29ydHRvZ2dsZXN0YXRlcyhhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdzb3J0dG9nZ2xlc3RhdGVzJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnc29ydHRvZ2dsZXN0YXRlcycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHVwZGF0ZWRlbGF5KGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3VwZGF0ZWRlbGF5JywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgndXBkYXRlZGVsYXknKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB2aXJ0dWFsbW9kZShhcmcpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCd2aXJ0dWFsbW9kZScsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ3ZpcnR1YWxtb2RlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdmVydGljYWxzY3JvbGxiYXJzdGVwKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3ZlcnRpY2Fsc2Nyb2xsYmFyc3RlcCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ3ZlcnRpY2Fsc2Nyb2xsYmFyc3RlcCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHZlcnRpY2Fsc2Nyb2xsYmFybGFyZ2VzdGVwKGFyZykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3ZlcnRpY2Fsc2Nyb2xsYmFybGFyZ2VzdGVwJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgndmVydGljYWxzY3JvbGxiYXJsYXJnZXN0ZXAnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBqcXhHcmlkQ29tcG9uZW50IGZ1bmN0aW9uc1xyXG4gICAgYXV0b3Jlc2l6ZWNvbHVtbnModHlwZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnYXV0b3Jlc2l6ZWNvbHVtbnMnLCB0eXBlKTtcclxuICAgIH1cclxuICAgIGF1dG9yZXNpemVjb2x1bW4oZGF0YUZpZWxkLCB0eXBlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdhdXRvcmVzaXplY29sdW1uJywgZGF0YUZpZWxkLCB0eXBlKTtcclxuICAgIH1cclxuICAgIGJlZ2ludXBkYXRlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnYmVnaW51cGRhdGUnKTtcclxuICAgIH1cclxuICAgIGNsZWFyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnY2xlYXInKTtcclxuICAgIH1cclxuICAgIGNyZWF0ZUNoYXJ0KHR5cGUsIGRhdGFTb3VyY2UpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2NyZWF0ZUNoYXJ0JywgdHlwZSwgZGF0YVNvdXJjZSk7XHJcbiAgICB9XHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnZGVzdHJveScpO1xyXG4gICAgfVxyXG4gICAgZW5kdXBkYXRlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnZW5kdXBkYXRlJyk7XHJcbiAgICB9XHJcbiAgICBlbnN1cmVyb3d2aXNpYmxlKHJvd0JvdW5kSW5kZXgpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2Vuc3VyZXJvd3Zpc2libGUnLCByb3dCb3VuZEluZGV4KTtcclxuICAgIH1cclxuICAgIGZvY3VzKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnZm9jdXMnKTtcclxuICAgIH1cclxuICAgIGdldGNvbHVtbmluZGV4KGRhdGFGaWVsZCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2dldGNvbHVtbmluZGV4JywgZGF0YUZpZWxkKTtcclxuICAgIH1cclxuICAgIGdldGNvbHVtbihkYXRhRmllbGQpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdnZXRjb2x1bW4nLCBkYXRhRmllbGQpO1xyXG4gICAgfVxyXG4gICAgZ2V0Y29sdW1ucHJvcGVydHkoZGF0YUZpZWxkLCBwcm9wZXJ0eU5hbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdnZXRjb2x1bW5wcm9wZXJ0eScsIGRhdGFGaWVsZCwgcHJvcGVydHlOYW1lKTtcclxuICAgIH1cclxuICAgIGdldHJvd2lkKHJvd0JvdW5kSW5kZXgpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdnZXRyb3dpZCcsIHJvd0JvdW5kSW5kZXgpO1xyXG4gICAgfVxyXG4gICAgZ2V0cm93ZGF0YShyb3dCb3VuZEluZGV4KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnZ2V0cm93ZGF0YScsIHJvd0JvdW5kSW5kZXgpO1xyXG4gICAgfVxyXG4gICAgZ2V0cm93ZGF0YWJ5aWQocm93SUQpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdnZXRyb3dkYXRhYnlpZCcsIHJvd0lEKTtcclxuICAgIH1cclxuICAgIGdldHJvd2JvdW5kaW5kZXhieWlkKHJvd0lEKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnZ2V0cm93Ym91bmRpbmRleGJ5aWQnLCByb3dJRCk7XHJcbiAgICB9XHJcbiAgICBnZXRyb3dib3VuZGluZGV4KHJvd0Rpc3BsYXlJbmRleCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2dldHJvd2JvdW5kaW5kZXgnLCByb3dEaXNwbGF5SW5kZXgpO1xyXG4gICAgfVxyXG4gICAgZ2V0cm93cygpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdnZXRyb3dzJyk7XHJcbiAgICB9XHJcbiAgICBnZXRib3VuZHJvd3MoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnZ2V0Ym91bmRyb3dzJyk7XHJcbiAgICB9XHJcbiAgICBnZXRkaXNwbGF5cm93cygpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdnZXRkaXNwbGF5cm93cycpO1xyXG4gICAgfVxyXG4gICAgZ2V0ZGF0YWluZm9ybWF0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2dldGRhdGFpbmZvcm1hdGlvbicpO1xyXG4gICAgfVxyXG4gICAgZ2V0c29ydGluZm9ybWF0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2dldHNvcnRpbmZvcm1hdGlvbicpO1xyXG4gICAgfVxyXG4gICAgZ2V0cGFnaW5naW5mb3JtYXRpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnZ2V0cGFnaW5naW5mb3JtYXRpb24nKTtcclxuICAgIH1cclxuICAgIGhpZGVjb2x1bW4oZGF0YUZpZWxkKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdoaWRlY29sdW1uJywgZGF0YUZpZWxkKTtcclxuICAgIH1cclxuICAgIGhpZGVsb2FkZWxlbWVudCgpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2hpZGVsb2FkZWxlbWVudCcpO1xyXG4gICAgfVxyXG4gICAgaGlkZXJvd2RldGFpbHMocm93Qm91bmRJbmRleCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnaGlkZXJvd2RldGFpbHMnLCByb3dCb3VuZEluZGV4KTtcclxuICAgIH1cclxuICAgIGlzY29sdW1udmlzaWJsZShkYXRhRmllbGQpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdpc2NvbHVtbnZpc2libGUnLCBkYXRhRmllbGQpO1xyXG4gICAgfVxyXG4gICAgaXNjb2x1bW5waW5uZWQoZGF0YUZpZWxkKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnaXNjb2x1bW5waW5uZWQnLCBkYXRhRmllbGQpO1xyXG4gICAgfVxyXG4gICAgbG9jYWxpemVzdHJpbmdzKGxvY2FsaXphdGlvbm9iamVjdCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnbG9jYWxpemVzdHJpbmdzJywgbG9jYWxpemF0aW9ub2JqZWN0KTtcclxuICAgIH1cclxuICAgIHBpbmNvbHVtbihkYXRhRmllbGQpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3BpbmNvbHVtbicsIGRhdGFGaWVsZCk7XHJcbiAgICB9XHJcbiAgICByZWZyZXNoZGF0YSgpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3JlZnJlc2hkYXRhJyk7XHJcbiAgICB9XHJcbiAgICByZWZyZXNoKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgncmVmcmVzaCcpO1xyXG4gICAgfVxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgncmVuZGVyJyk7XHJcbiAgICB9XHJcbiAgICBzY3JvbGxvZmZzZXQodG9wLCBsZWZ0KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdzY3JvbGxvZmZzZXQnLCB0b3AsIGxlZnQpO1xyXG4gICAgfVxyXG4gICAgc2Nyb2xscG9zaXRpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnc2Nyb2xscG9zaXRpb24nKTtcclxuICAgIH1cclxuICAgIHNob3dsb2FkZWxlbWVudCgpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3Nob3dsb2FkZWxlbWVudCcpO1xyXG4gICAgfVxyXG4gICAgc2hvd3Jvd2RldGFpbHMocm93Qm91bmRJbmRleCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnc2hvd3Jvd2RldGFpbHMnLCByb3dCb3VuZEluZGV4KTtcclxuICAgIH1cclxuICAgIHNldGNvbHVtbmluZGV4KGRhdGFGaWVsZCwgaW5kZXgpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3NldGNvbHVtbmluZGV4JywgZGF0YUZpZWxkLCBpbmRleCk7XHJcbiAgICB9XHJcbiAgICBzZXRjb2x1bW5wcm9wZXJ0eShkYXRhRmllbGQsIHByb3BlcnR5TmFtZSwgcHJvcGVydHlWYWx1ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnc2V0Y29sdW1ucHJvcGVydHknLCBkYXRhRmllbGQsIHByb3BlcnR5TmFtZSwgcHJvcGVydHlWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICBzaG93Y29sdW1uKGRhdGFGaWVsZCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnc2hvd2NvbHVtbicsIGRhdGFGaWVsZCk7XHJcbiAgICB9XHJcbiAgICB1bnBpbmNvbHVtbihkYXRhRmllbGQpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3VucGluY29sdW1uJywgZGF0YUZpZWxkKTtcclxuICAgIH1cclxuICAgIHVwZGF0ZWJvdW5kZGF0YSh0eXBlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCd1cGRhdGVib3VuZGRhdGEnLCB0eXBlKTtcclxuICAgIH1cclxuICAgIHVwZGF0aW5nKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ3VwZGF0aW5nJyk7XHJcbiAgICB9XHJcbiAgICBnZXRzb3J0Y29sdW1uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2dldHNvcnRjb2x1bW4nKTtcclxuICAgIH1cclxuICAgIHJlbW92ZXNvcnQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdyZW1vdmVzb3J0Jyk7XHJcbiAgICB9XHJcbiAgICBzb3J0YnkoZGF0YUZpZWxkLCBzb3J0T3JkZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3NvcnRieScsIGRhdGFGaWVsZCwgc29ydE9yZGVyKTtcclxuICAgIH1cclxuICAgIGFkZGdyb3VwKGRhdGFGaWVsZCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnYWRkZ3JvdXAnLCBkYXRhRmllbGQpO1xyXG4gICAgfVxyXG4gICAgY2xlYXJncm91cHMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdjbGVhcmdyb3VwcycpO1xyXG4gICAgfVxyXG4gICAgY29sbGFwc2Vncm91cChncm91cCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnY29sbGFwc2Vncm91cCcsIGdyb3VwKTtcclxuICAgIH1cclxuICAgIGNvbGxhcHNlYWxsZ3JvdXBzKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnY29sbGFwc2VhbGxncm91cHMnKTtcclxuICAgIH1cclxuICAgIGV4cGFuZGFsbGdyb3VwcygpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2V4cGFuZGFsbGdyb3VwcycpO1xyXG4gICAgfVxyXG4gICAgZXhwYW5kZ3JvdXAoZ3JvdXApIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2V4cGFuZGdyb3VwJywgZ3JvdXApO1xyXG4gICAgfVxyXG4gICAgZ2V0cm9vdGdyb3Vwc2NvdW50KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2dldHJvb3Rncm91cHNjb3VudCcpO1xyXG4gICAgfVxyXG4gICAgZ2V0Z3JvdXAoZ3JvdXBJbmRleCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2dldGdyb3VwJywgZ3JvdXBJbmRleCk7XHJcbiAgICB9XHJcbiAgICBpbnNlcnRncm91cChncm91cEluZGV4LCBkYXRhRmllbGQpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2luc2VydGdyb3VwJywgZ3JvdXBJbmRleCwgZGF0YUZpZWxkKTtcclxuICAgIH1cclxuICAgIGlzY29sdW1uZ3JvdXBhYmxlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2lzY29sdW1uZ3JvdXBhYmxlJyk7XHJcbiAgICB9XHJcbiAgICByZW1vdmVncm91cGF0KGdyb3VwSW5kZXgpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3JlbW92ZWdyb3VwYXQnLCBncm91cEluZGV4KTtcclxuICAgIH1cclxuICAgIHJlbW92ZWdyb3VwKGRhdGFGaWVsZCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgncmVtb3ZlZ3JvdXAnLCBkYXRhRmllbGQpO1xyXG4gICAgfVxyXG4gICAgYWRkZmlsdGVyKGRhdGFGaWVsZCwgZmlsdGVyR3JvdXAsIHJlZnJlc2hHcmlkKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdhZGRmaWx0ZXInLCBkYXRhRmllbGQsIGZpbHRlckdyb3VwLCByZWZyZXNoR3JpZCk7XHJcbiAgICB9XHJcbiAgICBhcHBseWZpbHRlcnMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdhcHBseWZpbHRlcnMnKTtcclxuICAgIH1cclxuICAgIGNsZWFyZmlsdGVycygpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2NsZWFyZmlsdGVycycpO1xyXG4gICAgfVxyXG4gICAgZ2V0ZmlsdGVyaW5mb3JtYXRpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnZ2V0ZmlsdGVyaW5mb3JtYXRpb24nKTtcclxuICAgIH1cclxuICAgIGdldGNvbHVtbmF0KGluZGV4KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnZ2V0Y29sdW1uYXQnLCBpbmRleCk7XHJcbiAgICB9XHJcbiAgICByZW1vdmVmaWx0ZXIoZGF0YUZpZWxkLCByZWZyZXNoR3JpZCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgncmVtb3ZlZmlsdGVyJywgZGF0YUZpZWxkLCByZWZyZXNoR3JpZCk7XHJcbiAgICB9XHJcbiAgICByZWZyZXNoZmlsdGVycm93KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgncmVmcmVzaGZpbHRlcnJvdycpO1xyXG4gICAgfVxyXG4gICAgZ290b3BhZ2UocGFnZW51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnZ290b3BhZ2UnLCBwYWdlbnVtYmVyKTtcclxuICAgIH1cclxuICAgIGdvdG9wcmV2cGFnZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2dvdG9wcmV2cGFnZScpO1xyXG4gICAgfVxyXG4gICAgZ290b25leHRwYWdlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnZ290b25leHRwYWdlJyk7XHJcbiAgICB9XHJcbiAgICBhZGRyb3cocm93SWRzLCBkYXRhLCByb3dQb3NpdGlvbikge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnYWRkcm93Jywgcm93SWRzLCBkYXRhLCByb3dQb3NpdGlvbik7XHJcbiAgICB9XHJcbiAgICBiZWdpbmNlbGxlZGl0KHJvd0JvdW5kSW5kZXgsIGRhdGFGaWVsZCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnYmVnaW5jZWxsZWRpdCcsIHJvd0JvdW5kSW5kZXgsIGRhdGFGaWVsZCk7XHJcbiAgICB9XHJcbiAgICBiZWdpbnJvd2VkaXQocm93Qm91bmRJbmRleCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnYmVnaW5yb3dlZGl0Jywgcm93Qm91bmRJbmRleCk7XHJcbiAgICB9XHJcbiAgICBjbG9zZW1lbnUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdjbG9zZW1lbnUnKTtcclxuICAgIH1cclxuICAgIGRlbGV0ZXJvdyhyb3dJZHMpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2RlbGV0ZXJvdycsIHJvd0lkcyk7XHJcbiAgICB9XHJcbiAgICBlbmRjZWxsZWRpdChyb3dCb3VuZEluZGV4LCBkYXRhRmllbGQsIGNvbmZpcm1DaGFuZ2VzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdlbmRjZWxsZWRpdCcsIHJvd0JvdW5kSW5kZXgsIGRhdGFGaWVsZCwgY29uZmlybUNoYW5nZXMpO1xyXG4gICAgfVxyXG4gICAgZW5kcm93ZWRpdChyb3dCb3VuZEluZGV4LCBjb25maXJtQ2hhbmdlcykge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QuanF4R3JpZCgnZW5kcm93ZWRpdCcsIHJvd0JvdW5kSW5kZXgsIGNvbmZpcm1DaGFuZ2VzKTtcclxuICAgIH1cclxuICAgIGdldGNlbGwocm93Qm91bmRJbmRleCwgZGF0YWZpZWxkKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnZ2V0Y2VsbCcsIHJvd0JvdW5kSW5kZXgsIGRhdGFmaWVsZCk7XHJcbiAgICB9XHJcbiAgICBnZXRjZWxsYXRwb3NpdGlvbihsZWZ0LCB0b3ApIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdnZXRjZWxsYXRwb3NpdGlvbicsIGxlZnQsIHRvcCk7XHJcbiAgICB9XHJcbiAgICBnZXRjZWxsdGV4dChyb3dCb3VuZEluZGV4LCBkYXRhRmllbGQpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdnZXRjZWxsdGV4dCcsIHJvd0JvdW5kSW5kZXgsIGRhdGFGaWVsZCk7XHJcbiAgICB9XHJcbiAgICBnZXRjZWxsdGV4dGJ5aWQocm93SUQsIGRhdGFGaWVsZCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2dldGNlbGx0ZXh0YnlpZCcsIHJvd0lELCBkYXRhRmllbGQpO1xyXG4gICAgfVxyXG4gICAgZ2V0Y2VsbHZhbHVlYnlpZChyb3dJRCwgZGF0YUZpZWxkKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnZ2V0Y2VsbHZhbHVlYnlpZCcsIHJvd0lELCBkYXRhRmllbGQpO1xyXG4gICAgfVxyXG4gICAgZ2V0Y2VsbHZhbHVlKHJvd0JvdW5kSW5kZXgsIGRhdGFGaWVsZCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2dldGNlbGx2YWx1ZScsIHJvd0JvdW5kSW5kZXgsIGRhdGFGaWVsZCk7XHJcbiAgICB9XHJcbiAgICBpc0JpbmRpbmdDb21wbGV0ZWQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnaXNCaW5kaW5nQ29tcGxldGVkJyk7XHJcbiAgICB9XHJcbiAgICBvcGVubWVudShkYXRhRmllbGQpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ29wZW5tZW51JywgZGF0YUZpZWxkKTtcclxuICAgIH1cclxuICAgIHNldGNlbGx2YWx1ZShyb3dCb3VuZEluZGV4LCBkYXRhRmllbGQsIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdzZXRjZWxsdmFsdWUnLCByb3dCb3VuZEluZGV4LCBkYXRhRmllbGQsIHZhbHVlKTtcclxuICAgIH1cclxuICAgIHNldGNlbGx2YWx1ZWJ5aWQocm93SUQsIGRhdGFGaWVsZCwgdmFsdWUpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3NldGNlbGx2YWx1ZWJ5aWQnLCByb3dJRCwgZGF0YUZpZWxkLCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBzaG93dmFsaWRhdGlvbnBvcHVwKHJvd0JvdW5kSW5kZXgsIGRhdGFGaWVsZCwgdmFsaWRhdGlvbk1lc3NhZ2UpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3Nob3d2YWxpZGF0aW9ucG9wdXAnLCByb3dCb3VuZEluZGV4LCBkYXRhRmllbGQsIHZhbGlkYXRpb25NZXNzYWdlKTtcclxuICAgIH1cclxuICAgIHVwZGF0ZXJvdyhyb3dJZHMsIGRhdGEpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3VwZGF0ZXJvdycsIHJvd0lkcywgZGF0YSk7XHJcbiAgICB9XHJcbiAgICBjbGVhcnNlbGVjdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2NsZWFyc2VsZWN0aW9uJyk7XHJcbiAgICB9XHJcbiAgICBnZXRzZWxlY3RlZHJvd2luZGV4KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2dldHNlbGVjdGVkcm93aW5kZXgnKTtcclxuICAgIH1cclxuICAgIGdldHNlbGVjdGVkcm93aW5kZXhlcygpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdnZXRzZWxlY3RlZHJvd2luZGV4ZXMnKTtcclxuICAgIH1cclxuICAgIGdldHNlbGVjdGVkY2VsbCgpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdnZXRzZWxlY3RlZGNlbGwnKTtcclxuICAgIH1cclxuICAgIGdldHNlbGVjdGVkY2VsbHMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnZ2V0c2VsZWN0ZWRjZWxscycpO1xyXG4gICAgfVxyXG4gICAgc2VsZWN0Y2VsbChyb3dCb3VuZEluZGV4LCBkYXRhRmllbGQpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3NlbGVjdGNlbGwnLCByb3dCb3VuZEluZGV4LCBkYXRhRmllbGQpO1xyXG4gICAgfVxyXG4gICAgc2VsZWN0YWxscm93cygpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3NlbGVjdGFsbHJvd3MnKTtcclxuICAgIH1cclxuICAgIHNlbGVjdHJvdyhyb3dCb3VuZEluZGV4KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdzZWxlY3Ryb3cnLCByb3dCb3VuZEluZGV4KTtcclxuICAgIH1cclxuICAgIHVuc2VsZWN0cm93KHJvd0JvdW5kSW5kZXgpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3Vuc2VsZWN0cm93Jywgcm93Qm91bmRJbmRleCk7XHJcbiAgICB9XHJcbiAgICB1bnNlbGVjdGNlbGwocm93Qm91bmRJbmRleCwgZGF0YUZpZWxkKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCd1bnNlbGVjdGNlbGwnLCByb3dCb3VuZEluZGV4LCBkYXRhRmllbGQpO1xyXG4gICAgfVxyXG4gICAgZ2V0Y29sdW1uYWdncmVnYXRlZGRhdGEoZGF0YUZpZWxkLCBhZ2dyZWdhdGVzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnZ2V0Y29sdW1uYWdncmVnYXRlZGRhdGEnLCBkYXRhRmllbGQsIGFnZ3JlZ2F0ZXMpO1xyXG4gICAgfVxyXG4gICAgcmVmcmVzaGFnZ3JlZ2F0ZXMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhHcmlkKCdyZWZyZXNoYWdncmVnYXRlcycpO1xyXG4gICAgfVxyXG4gICAgcmVuZGVyYWdncmVnYXRlcygpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ3JlbmRlcmFnZ3JlZ2F0ZXMnKTtcclxuICAgIH1cclxuICAgIGV4cG9ydGRhdGEoZGF0YVR5cGUsIGZpbGVOYW1lLCBleHBvcnRIZWFkZXIsIHJvd3MsIGV4cG9ydEhpZGRlbkNvbHVtbnMsIHNlcnZlclVSTCwgY2hhclNldCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2V4cG9ydGRhdGEnLCBkYXRhVHlwZSwgZmlsZU5hbWUsIGV4cG9ydEhlYWRlciwgcm93cywgZXhwb3J0SGlkZGVuQ29sdW1ucywgc2VydmVyVVJMLCBjaGFyU2V0KTtcclxuICAgIH1cclxuICAgIGV4cG9ydHZpZXcoZGF0YVR5cGUsIGZpbGVOYW1lKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b0NyZWF0ZSAmJiAhdGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4R3JpZCgnZXhwb3J0dmlldycsIGRhdGFUeXBlLCBmaWxlTmFtZSk7XHJcbiAgICB9XHJcbiAgICBvcGVuQ29sdW1uQ2hvb3Nlcihjb2x1bW5zLCBoZWFkZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ29wZW5Db2x1bW5DaG9vc2VyJywgY29sdW1ucywgaGVhZGVyKTtcclxuICAgIH1cclxuICAgIGdldHN0YXRlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9DcmVhdGUgJiYgIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeEdyaWQoJ2dldHN0YXRlJyk7XHJcbiAgICB9XHJcbiAgICBsb2Fkc3RhdGUoc3RhdGVvYmplY3QpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeEdyaWQoJ2xvYWRzdGF0ZScsIHN0YXRlb2JqZWN0KTtcclxuICAgIH1cclxuICAgIHNhdmVzdGF0ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlICYmICF0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhHcmlkKCdzYXZlc3RhdGUnKTtcclxuICAgIH1cclxuICAgIF9fd2lyZUV2ZW50c19fKCkge1xyXG4gICAgICAgIHRoaXMuaG9zdC5vbignYmluZGluZ2NvbXBsZXRlJywgKGV2ZW50RGF0YSkgPT4geyB0aGlzLm9uQmluZGluZ2NvbXBsZXRlLmVtaXQoZXZlbnREYXRhKTsgfSk7XHJcbiAgICAgICAgdGhpcy5ob3N0Lm9uKCdjb2x1bW5yZXNpemVkJywgKGV2ZW50RGF0YSkgPT4geyB0aGlzLm9uQ29sdW1ucmVzaXplZC5lbWl0KGV2ZW50RGF0YSk7IH0pO1xyXG4gICAgICAgIHRoaXMuaG9zdC5vbignY29sdW1ucmVvcmRlcmVkJywgKGV2ZW50RGF0YSkgPT4geyB0aGlzLm9uQ29sdW1ucmVvcmRlcmVkLmVtaXQoZXZlbnREYXRhKTsgfSk7XHJcbiAgICAgICAgdGhpcy5ob3N0Lm9uKCdjb2x1bW5jbGljaycsIChldmVudERhdGEpID0+IHsgdGhpcy5vbkNvbHVtbmNsaWNrLmVtaXQoZXZlbnREYXRhKTsgfSk7XHJcbiAgICAgICAgdGhpcy5ob3N0Lm9uKCdjZWxsY2xpY2snLCAoZXZlbnREYXRhKSA9PiB7IHRoaXMub25DZWxsY2xpY2suZW1pdChldmVudERhdGEpOyB9KTtcclxuICAgICAgICB0aGlzLmhvc3Qub24oJ2NlbGxkb3VibGVjbGljaycsIChldmVudERhdGEpID0+IHsgdGhpcy5vbkNlbGxkb3VibGVjbGljay5lbWl0KGV2ZW50RGF0YSk7IH0pO1xyXG4gICAgICAgIHRoaXMuaG9zdC5vbignY2VsbHNlbGVjdCcsIChldmVudERhdGEpID0+IHsgdGhpcy5vbkNlbGxzZWxlY3QuZW1pdChldmVudERhdGEpOyB9KTtcclxuICAgICAgICB0aGlzLmhvc3Qub24oJ2NlbGx1bnNlbGVjdCcsIChldmVudERhdGEpID0+IHsgdGhpcy5vbkNlbGx1bnNlbGVjdC5lbWl0KGV2ZW50RGF0YSk7IH0pO1xyXG4gICAgICAgIHRoaXMuaG9zdC5vbignY2VsbHZhbHVlY2hhbmdlZCcsIChldmVudERhdGEpID0+IHsgdGhpcy5vbkNlbGx2YWx1ZWNoYW5nZWQuZW1pdChldmVudERhdGEpOyB9KTtcclxuICAgICAgICB0aGlzLmhvc3Qub24oJ2NlbGxiZWdpbmVkaXQnLCAoZXZlbnREYXRhKSA9PiB7IHRoaXMub25DZWxsYmVnaW5lZGl0LmVtaXQoZXZlbnREYXRhKTsgfSk7XHJcbiAgICAgICAgdGhpcy5ob3N0Lm9uKCdjZWxsZW5kZWRpdCcsIChldmVudERhdGEpID0+IHsgdGhpcy5vbkNlbGxlbmRlZGl0LmVtaXQoZXZlbnREYXRhKTsgfSk7XHJcbiAgICAgICAgdGhpcy5ob3N0Lm9uKCdmaWx0ZXInLCAoZXZlbnREYXRhKSA9PiB7IHRoaXMub25GaWx0ZXIuZW1pdChldmVudERhdGEpOyB9KTtcclxuICAgICAgICB0aGlzLmhvc3Qub24oJ2dyb3Vwc2NoYW5nZWQnLCAoZXZlbnREYXRhKSA9PiB7IHRoaXMub25Hcm91cHNjaGFuZ2VkLmVtaXQoZXZlbnREYXRhKTsgfSk7XHJcbiAgICAgICAgdGhpcy5ob3N0Lm9uKCdncm91cGV4cGFuZCcsIChldmVudERhdGEpID0+IHsgdGhpcy5vbkdyb3VwZXhwYW5kLmVtaXQoZXZlbnREYXRhKTsgfSk7XHJcbiAgICAgICAgdGhpcy5ob3N0Lm9uKCdncm91cGNvbGxhcHNlJywgKGV2ZW50RGF0YSkgPT4geyB0aGlzLm9uR3JvdXBjb2xsYXBzZS5lbWl0KGV2ZW50RGF0YSk7IH0pO1xyXG4gICAgICAgIHRoaXMuaG9zdC5vbigncGFnZWNoYW5nZWQnLCAoZXZlbnREYXRhKSA9PiB7IHRoaXMub25QYWdlY2hhbmdlZC5lbWl0KGV2ZW50RGF0YSk7IH0pO1xyXG4gICAgICAgIHRoaXMuaG9zdC5vbigncGFnZXNpemVjaGFuZ2VkJywgKGV2ZW50RGF0YSkgPT4geyB0aGlzLm9uUGFnZXNpemVjaGFuZ2VkLmVtaXQoZXZlbnREYXRhKTsgfSk7XHJcbiAgICAgICAgdGhpcy5ob3N0Lm9uKCdyb3djbGljaycsIChldmVudERhdGEpID0+IHsgdGhpcy5vblJvd2NsaWNrLmVtaXQoZXZlbnREYXRhKTsgfSk7XHJcbiAgICAgICAgdGhpcy5ob3N0Lm9uKCdyb3dkb3VibGVjbGljaycsIChldmVudERhdGEpID0+IHsgdGhpcy5vblJvd2RvdWJsZWNsaWNrLmVtaXQoZXZlbnREYXRhKTsgfSk7XHJcbiAgICAgICAgdGhpcy5ob3N0Lm9uKCdyb3dzZWxlY3QnLCAoZXZlbnREYXRhKSA9PiB7IHRoaXMub25Sb3dzZWxlY3QuZW1pdChldmVudERhdGEpOyB9KTtcclxuICAgICAgICB0aGlzLmhvc3Qub24oJ3Jvd3Vuc2VsZWN0JywgKGV2ZW50RGF0YSkgPT4geyB0aGlzLm9uUm93dW5zZWxlY3QuZW1pdChldmVudERhdGEpOyB9KTtcclxuICAgICAgICB0aGlzLmhvc3Qub24oJ3Jvd2V4cGFuZCcsIChldmVudERhdGEpID0+IHsgdGhpcy5vblJvd2V4cGFuZC5lbWl0KGV2ZW50RGF0YSk7IH0pO1xyXG4gICAgICAgIHRoaXMuaG9zdC5vbigncm93Y29sbGFwc2UnLCAoZXZlbnREYXRhKSA9PiB7IHRoaXMub25Sb3djb2xsYXBzZS5lbWl0KGV2ZW50RGF0YSk7IH0pO1xyXG4gICAgICAgIHRoaXMuaG9zdC5vbignc29ydCcsIChldmVudERhdGEpID0+IHsgdGhpcy5vblNvcnQuZW1pdChldmVudERhdGEpOyB9KTtcclxuICAgIH1cclxufSAvL2pxeEdyaWRDb21wb25lbnRcclxuanF4R3JpZENvbXBvbmVudC5kZWNvcmF0b3JzID0gW1xyXG4gICAgeyB0eXBlOiBDb21wb25lbnQsIGFyZ3M6IFt7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2pxeEdyaWQnLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2PjxuZy1jb250ZW50PjwvbmctY29udGVudD48L2Rpdj4nXHJcbiAgICAgICAgICAgIH0sXSB9XHJcbl07XHJcbmpxeEdyaWRDb21wb25lbnQuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXHJcbiAgICB7IHR5cGU6IEVsZW1lbnRSZWYgfVxyXG5dO1xyXG5qcXhHcmlkQ29tcG9uZW50LnByb3BEZWNvcmF0b3JzID0ge1xyXG4gICAgYXR0ckFsdHJvd3M6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2FsdHJvd3MnLF0gfV0sXHJcbiAgICBhdHRyQWx0c3RhcnQ6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2FsdHN0YXJ0JyxdIH1dLFxyXG4gICAgYXR0ckFsdHN0ZXA6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2FsdHN0ZXAnLF0gfV0sXHJcbiAgICBhdHRyQXV0b3Nob3dsb2FkZWxlbWVudDogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnYXV0b3Nob3dsb2FkZWxlbWVudCcsXSB9XSxcclxuICAgIGF0dHJBdXRvc2hvd2ZpbHRlcmljb246IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2F1dG9zaG93ZmlsdGVyaWNvbicsXSB9XSxcclxuICAgIGF0dHJBdXRvc2hvd2NvbHVtbnNtZW51YnV0dG9uOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydhdXRvc2hvd2NvbHVtbnNtZW51YnV0dG9uJyxdIH1dLFxyXG4gICAgYXR0clNob3djb2x1bW5saW5lczogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnc2hvd2NvbHVtbmxpbmVzJyxdIH1dLFxyXG4gICAgYXR0clNob3dyb3dsaW5lczogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnc2hvd3Jvd2xpbmVzJyxdIH1dLFxyXG4gICAgYXR0clNob3djb2x1bW5oZWFkZXJsaW5lczogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnc2hvd2NvbHVtbmhlYWRlcmxpbmVzJyxdIH1dLFxyXG4gICAgYXR0ckFkYXB0aXZlOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydhZGFwdGl2ZScsXSB9XSxcclxuICAgIGF0dHJBZGFwdGl2ZXdpZHRoOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydhZGFwdGl2ZXdpZHRoJyxdIH1dLFxyXG4gICAgYXR0ckNsaXBib2FyZDogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnY2xpcGJvYXJkJyxdIH1dLFxyXG4gICAgYXR0ckNsb3NlYWJsZWdyb3VwczogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnY2xvc2VhYmxlZ3JvdXBzJyxdIH1dLFxyXG4gICAgYXR0ckNvbHVtbnNtZW51d2lkdGg6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2NvbHVtbnNtZW51d2lkdGgnLF0gfV0sXHJcbiAgICBhdHRyQ29sdW1ubWVudW9wZW5pbmc6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2NvbHVtbm1lbnVvcGVuaW5nJyxdIH1dLFxyXG4gICAgYXR0ckNvbHVtbm1lbnVjbG9zaW5nOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydjb2x1bW5tZW51Y2xvc2luZycsXSB9XSxcclxuICAgIGF0dHJDZWxsaG92ZXI6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2NlbGxob3ZlcicsXSB9XSxcclxuICAgIGF0dHJFbmFibGVrZXlib2FyZGRlbGV0ZTogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnZW5hYmxla2V5Ym9hcmRkZWxldGUnLF0gfV0sXHJcbiAgICBhdHRyRW5hYmxlZWxsaXBzaXM6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2VuYWJsZWVsbGlwc2lzJyxdIH1dLFxyXG4gICAgYXR0ckVuYWJsZW1vdXNld2hlZWw6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2VuYWJsZW1vdXNld2hlZWwnLF0gfV0sXHJcbiAgICBhdHRyRW5hYmxlYW5pbWF0aW9uczogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnZW5hYmxlYW5pbWF0aW9ucycsXSB9XSxcclxuICAgIGF0dHJFbmFibGV0b29sdGlwczogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnZW5hYmxldG9vbHRpcHMnLF0gfV0sXHJcbiAgICBhdHRyRW5hYmxlaG92ZXI6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2VuYWJsZWhvdmVyJyxdIH1dLFxyXG4gICAgYXR0ckVuYWJsZWJyb3dzZXJzZWxlY3Rpb246IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2VuYWJsZWJyb3dzZXJzZWxlY3Rpb24nLF0gfV0sXHJcbiAgICBhdHRyRXZlcnByZXNlbnRyb3dwb3NpdGlvbjogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnZXZlcnByZXNlbnRyb3dwb3NpdGlvbicsXSB9XSxcclxuICAgIGF0dHJFdmVycHJlc2VudHJvd2hlaWdodDogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnZXZlcnByZXNlbnRyb3doZWlnaHQnLF0gfV0sXHJcbiAgICBhdHRyRXZlcnByZXNlbnRyb3dhY3Rpb25zOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydldmVycHJlc2VudHJvd2FjdGlvbnMnLF0gfV0sXHJcbiAgICBhdHRyRXZlcnByZXNlbnRyb3dhY3Rpb25zbW9kZTogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnZXZlcnByZXNlbnRyb3dhY3Rpb25zbW9kZScsXSB9XSxcclxuICAgIGF0dHJGaWx0ZXJyb3doZWlnaHQ6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2ZpbHRlcnJvd2hlaWdodCcsXSB9XSxcclxuICAgIGF0dHJGaWx0ZXJtb2RlOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydmaWx0ZXJtb2RlJyxdIH1dLFxyXG4gICAgYXR0ckdyb3Vwc3JlbmRlcmVyOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydncm91cHNyZW5kZXJlcicsXSB9XSxcclxuICAgIGF0dHJHcm91cGNvbHVtbnJlbmRlcmVyOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydncm91cGNvbHVtbnJlbmRlcmVyJyxdIH1dLFxyXG4gICAgYXR0ckdyb3Vwc2V4cGFuZGVkYnlkZWZhdWx0OiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydncm91cHNleHBhbmRlZGJ5ZGVmYXVsdCcsXSB9XSxcclxuICAgIGF0dHJIYW5kbGVrZXlib2FyZG5hdmlnYXRpb246IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2hhbmRsZWtleWJvYXJkbmF2aWdhdGlvbicsXSB9XSxcclxuICAgIGF0dHJQYWdlcnJlbmRlcmVyOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydwYWdlcnJlbmRlcmVyJyxdIH1dLFxyXG4gICAgYXR0clJ0bDogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsncnRsJyxdIH1dLFxyXG4gICAgYXR0clNob3dkZWZhdWx0bG9hZGVsZW1lbnQ6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ3Nob3dkZWZhdWx0bG9hZGVsZW1lbnQnLF0gfV0sXHJcbiAgICBhdHRyU2hvd2ZpbHRlcmNvbHVtbmJhY2tncm91bmQ6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ3Nob3dmaWx0ZXJjb2x1bW5iYWNrZ3JvdW5kJyxdIH1dLFxyXG4gICAgYXR0clNob3dmaWx0ZXJtZW51aXRlbXM6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ3Nob3dmaWx0ZXJtZW51aXRlbXMnLF0gfV0sXHJcbiAgICBhdHRyU2hvd3Bpbm5lZGNvbHVtbmJhY2tncm91bmQ6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ3Nob3dwaW5uZWRjb2x1bW5iYWNrZ3JvdW5kJyxdIH1dLFxyXG4gICAgYXR0clNob3dzb3J0Y29sdW1uYmFja2dyb3VuZDogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnc2hvd3NvcnRjb2x1bW5iYWNrZ3JvdW5kJyxdIH1dLFxyXG4gICAgYXR0clNob3dzb3J0bWVudWl0ZW1zOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydzaG93c29ydG1lbnVpdGVtcycsXSB9XSxcclxuICAgIGF0dHJTaG93Z3JvdXBtZW51aXRlbXM6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ3Nob3dncm91cG1lbnVpdGVtcycsXSB9XSxcclxuICAgIGF0dHJTaG93cm93ZGV0YWlsc2NvbHVtbjogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnc2hvd3Jvd2RldGFpbHNjb2x1bW4nLF0gfV0sXHJcbiAgICBhdHRyU2hvd2hlYWRlcjogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnc2hvd2hlYWRlcicsXSB9XSxcclxuICAgIGF0dHJTaG93Z3JvdXBzaGVhZGVyOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydzaG93Z3JvdXBzaGVhZGVyJyxdIH1dLFxyXG4gICAgYXR0clNob3dhZ2dyZWdhdGVzOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydzaG93YWdncmVnYXRlcycsXSB9XSxcclxuICAgIGF0dHJTaG93Z3JvdXBhZ2dyZWdhdGVzOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydzaG93Z3JvdXBhZ2dyZWdhdGVzJyxdIH1dLFxyXG4gICAgYXR0clNob3dldmVycHJlc2VudHJvdzogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnc2hvd2V2ZXJwcmVzZW50cm93JyxdIH1dLFxyXG4gICAgYXR0clNob3dmaWx0ZXJyb3c6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ3Nob3dmaWx0ZXJyb3cnLF0gfV0sXHJcbiAgICBhdHRyU2hvd2VtcHR5cm93OiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydzaG93ZW1wdHlyb3cnLF0gfV0sXHJcbiAgICBhdHRyU2hvd3N0YXR1c2JhcjogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnc2hvd3N0YXR1c2JhcicsXSB9XSxcclxuICAgIGF0dHJTdGF0dXNiYXJoZWlnaHQ6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ3N0YXR1c2JhcmhlaWdodCcsXSB9XSxcclxuICAgIGF0dHJTaG93dG9vbGJhcjogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnc2hvd3Rvb2xiYXInLF0gfV0sXHJcbiAgICBhdHRyU2hvd2ZpbHRlcmJhcjogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnc2hvd2ZpbHRlcmJhcicsXSB9XSxcclxuICAgIGF0dHJGaWx0ZXJiYXJtb2RlOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydmaWx0ZXJiYXJtb2RlJyxdIH1dLFxyXG4gICAgYXR0clNlbGVjdGlvbm1vZGU6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ3NlbGVjdGlvbm1vZGUnLF0gfV0sXHJcbiAgICBhdHRyVXBkYXRlZmlsdGVyY29uZGl0aW9uczogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsndXBkYXRlZmlsdGVyY29uZGl0aW9ucycsXSB9XSxcclxuICAgIGF0dHJVcGRhdGVmaWx0ZXJwYW5lbDogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsndXBkYXRlZmlsdGVycGFuZWwnLF0gfV0sXHJcbiAgICBhdHRyVGhlbWU6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ3RoZW1lJyxdIH1dLFxyXG4gICAgYXR0clRvb2xiYXJoZWlnaHQ6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ3Rvb2xiYXJoZWlnaHQnLF0gfV0sXHJcbiAgICBhdHRyQXV0b2hlaWdodDogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnYXV0b2hlaWdodCcsXSB9XSxcclxuICAgIGF0dHJBdXRvcm93aGVpZ2h0OiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydhdXRvcm93aGVpZ2h0JyxdIH1dLFxyXG4gICAgYXR0ckNvbHVtbnNoZWlnaHQ6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2NvbHVtbnNoZWlnaHQnLF0gfV0sXHJcbiAgICBhdHRyRGVmZXJyZWRkYXRhZmllbGRzOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydkZWZlcnJlZGRhdGFmaWVsZHMnLF0gfV0sXHJcbiAgICBhdHRyR3JvdXBzaGVhZGVyaGVpZ2h0OiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydncm91cHNoZWFkZXJoZWlnaHQnLF0gfV0sXHJcbiAgICBhdHRyR3JvdXBpbmRlbnR3aWR0aDogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnZ3JvdXBpbmRlbnR3aWR0aCcsXSB9XSxcclxuICAgIGF0dHJQYWdlcmhlaWdodDogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsncGFnZXJoZWlnaHQnLF0gfV0sXHJcbiAgICBhdHRyUm93c2hlaWdodDogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsncm93c2hlaWdodCcsXSB9XSxcclxuICAgIGF0dHJTY3JvbGxiYXJzaXplOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydzY3JvbGxiYXJzaXplJyxdIH1dLFxyXG4gICAgYXR0clNjcm9sbG1vZGU6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ3Njcm9sbG1vZGUnLF0gfV0sXHJcbiAgICBhdHRyU2Nyb2xsZmVlZGJhY2s6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ3Njcm9sbGZlZWRiYWNrJyxdIH1dLFxyXG4gICAgYXR0ckF1dG9zYXZlc3RhdGU6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2F1dG9zYXZlc3RhdGUnLF0gfV0sXHJcbiAgICBhdHRyQXV0b2xvYWRzdGF0ZTogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnYXV0b2xvYWRzdGF0ZScsXSB9XSxcclxuICAgIGF0dHJDb2x1bW5zOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydjb2x1bW5zJyxdIH1dLFxyXG4gICAgYXR0ckVuYWJsZVNhbml0aXplOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydlbmFibGVTYW5pdGl6ZScsXSB9XSxcclxuICAgIGF0dHJDYXJkdmlldzogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnY2FyZHZpZXcnLF0gfV0sXHJcbiAgICBhdHRyQ2FyZHZpZXdjb2x1bW5zOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydjYXJkdmlld2NvbHVtbnMnLF0gfV0sXHJcbiAgICBhdHRyQ2FyZGhlaWdodDogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnY2FyZGhlaWdodCcsXSB9XSxcclxuICAgIGF0dHJDYXJkc2l6ZTogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnY2FyZHNpemUnLF0gfV0sXHJcbiAgICBhdHRyQ29sdW1uZ3JvdXBzOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydjb2x1bW5ncm91cHMnLF0gfV0sXHJcbiAgICBhdHRyQ29sdW1uc21lbnU6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2NvbHVtbnNtZW51JyxdIH1dLFxyXG4gICAgYXR0ckNvbHVtbnNyZXNpemU6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2NvbHVtbnNyZXNpemUnLF0gfV0sXHJcbiAgICBhdHRyQ29sdW1uc2F1dG9yZXNpemU6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2NvbHVtbnNhdXRvcmVzaXplJyxdIH1dLFxyXG4gICAgYXR0ckNvbHVtbnNyZW9yZGVyOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydjb2x1bW5zcmVvcmRlcicsXSB9XSxcclxuICAgIGF0dHJDaGFydGluZzogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnY2hhcnRpbmcnLF0gfV0sXHJcbiAgICBhdHRyRGlzYWJsZWQ6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2Rpc2FibGVkJyxdIH1dLFxyXG4gICAgYXR0ckVkaXRhYmxlOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydlZGl0YWJsZScsXSB9XSxcclxuICAgIGF0dHJCYXRjaGVkaXRhYmxlOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydiYXRjaGVkaXRhYmxlJyxdIH1dLFxyXG4gICAgYXR0ckVkaXRtb2RlOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydlZGl0bW9kZScsXSB9XSxcclxuICAgIGF0dHJGaWx0ZXI6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2ZpbHRlcicsXSB9XSxcclxuICAgIGF0dHJGaWx0ZXJhYmxlOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydmaWx0ZXJhYmxlJyxdIH1dLFxyXG4gICAgYXR0ckdyb3VwYWJsZTogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnZ3JvdXBhYmxlJyxdIH1dLFxyXG4gICAgYXR0ckdyb3VwczogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnZ3JvdXBzJyxdIH1dLFxyXG4gICAgYXR0ckhvcml6b250YWxzY3JvbGxiYXJzdGVwOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydob3Jpem9udGFsc2Nyb2xsYmFyc3RlcCcsXSB9XSxcclxuICAgIGF0dHJIb3Jpem9udGFsc2Nyb2xsYmFybGFyZ2VzdGVwOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydob3Jpem9udGFsc2Nyb2xsYmFybGFyZ2VzdGVwJyxdIH1dLFxyXG4gICAgYXR0ckluaXRyb3dkZXRhaWxzOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydpbml0cm93ZGV0YWlscycsXSB9XSxcclxuICAgIGF0dHJLZXlib2FyZG5hdmlnYXRpb246IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2tleWJvYXJkbmF2aWdhdGlvbicsXSB9XSxcclxuICAgIGF0dHJMb2NhbGl6YXRpb246IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2xvY2FsaXphdGlvbicsXSB9XSxcclxuICAgIGF0dHJQYWdlc2l6ZTogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsncGFnZXNpemUnLF0gfV0sXHJcbiAgICBhdHRyUGFnZXNpemVvcHRpb25zOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydwYWdlc2l6ZW9wdGlvbnMnLF0gfV0sXHJcbiAgICBhdHRyUGFnZXJtb2RlOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydwYWdlcm1vZGUnLF0gfV0sXHJcbiAgICBhdHRyUGFnZXJidXR0b25zY291bnQ6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ3BhZ2VyYnV0dG9uc2NvdW50JyxdIH1dLFxyXG4gICAgYXR0clBhZ2VhYmxlOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydwYWdlYWJsZScsXSB9XSxcclxuICAgIGF0dHJBdXRvZmlsbDogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnYXV0b2ZpbGwnLF0gfV0sXHJcbiAgICBhdHRyUm93ZGV0YWlsczogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsncm93ZGV0YWlscycsXSB9XSxcclxuICAgIGF0dHJSb3dkZXRhaWxzdGVtcGxhdGU6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ3Jvd2RldGFpbHN0ZW1wbGF0ZScsXSB9XSxcclxuICAgIGF0dHJSZWFkeTogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsncmVhZHknLF0gfV0sXHJcbiAgICBhdHRyUmVuZGVyZWQ6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ3JlbmRlcmVkJyxdIH1dLFxyXG4gICAgYXR0clJlbmRlcnN0YXR1c2JhcjogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsncmVuZGVyc3RhdHVzYmFyJyxdIH1dLFxyXG4gICAgYXR0clJlbmRlcnRvb2xiYXI6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ3JlbmRlcnRvb2xiYXInLF0gfV0sXHJcbiAgICBhdHRyUmVuZGVyZ3JpZHJvd3M6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ3JlbmRlcmdyaWRyb3dzJyxdIH1dLFxyXG4gICAgYXR0clNvcnRhYmxlOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydzb3J0YWJsZScsXSB9XSxcclxuICAgIGF0dHJTb3J0bW9kZTogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnc29ydG1vZGUnLF0gfV0sXHJcbiAgICBhdHRyU2VsZWN0ZWRyb3dpbmRleDogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnc2VsZWN0ZWRyb3dpbmRleCcsXSB9XSxcclxuICAgIGF0dHJTZWxlY3RlZHJvd2luZGV4ZXM6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ3NlbGVjdGVkcm93aW5kZXhlcycsXSB9XSxcclxuICAgIGF0dHJTb3VyY2U6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ3NvdXJjZScsXSB9XSxcclxuICAgIGF0dHJTb3J0dG9nZ2xlc3RhdGVzOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydzb3J0dG9nZ2xlc3RhdGVzJyxdIH1dLFxyXG4gICAgYXR0clVwZGF0ZWRlbGF5OiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWyd1cGRhdGVkZWxheScsXSB9XSxcclxuICAgIGF0dHJWaXJ0dWFsbW9kZTogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsndmlydHVhbG1vZGUnLF0gfV0sXHJcbiAgICBhdHRyVmVydGljYWxzY3JvbGxiYXJzdGVwOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWyd2ZXJ0aWNhbHNjcm9sbGJhcnN0ZXAnLF0gfV0sXHJcbiAgICBhdHRyVmVydGljYWxzY3JvbGxiYXJsYXJnZXN0ZXA6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ3ZlcnRpY2Fsc2Nyb2xsYmFybGFyZ2VzdGVwJyxdIH1dLFxyXG4gICAgYXR0cldpZHRoOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWyd3aWR0aCcsXSB9XSxcclxuICAgIGF0dHJIZWlnaHQ6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2hlaWdodCcsXSB9XSxcclxuICAgIGF1dG9DcmVhdGU6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2F1dG8tY3JlYXRlJyxdIH1dLFxyXG4gICAgb25CaW5kaW5nY29tcGxldGU6IFt7IHR5cGU6IE91dHB1dCB9XSxcclxuICAgIG9uQ29sdW1ucmVzaXplZDogW3sgdHlwZTogT3V0cHV0IH1dLFxyXG4gICAgb25Db2x1bW5yZW9yZGVyZWQ6IFt7IHR5cGU6IE91dHB1dCB9XSxcclxuICAgIG9uQ29sdW1uY2xpY2s6IFt7IHR5cGU6IE91dHB1dCB9XSxcclxuICAgIG9uQ2VsbGNsaWNrOiBbeyB0eXBlOiBPdXRwdXQgfV0sXHJcbiAgICBvbkNlbGxkb3VibGVjbGljazogW3sgdHlwZTogT3V0cHV0IH1dLFxyXG4gICAgb25DZWxsc2VsZWN0OiBbeyB0eXBlOiBPdXRwdXQgfV0sXHJcbiAgICBvbkNlbGx1bnNlbGVjdDogW3sgdHlwZTogT3V0cHV0IH1dLFxyXG4gICAgb25DZWxsdmFsdWVjaGFuZ2VkOiBbeyB0eXBlOiBPdXRwdXQgfV0sXHJcbiAgICBvbkNlbGxiZWdpbmVkaXQ6IFt7IHR5cGU6IE91dHB1dCB9XSxcclxuICAgIG9uQ2VsbGVuZGVkaXQ6IFt7IHR5cGU6IE91dHB1dCB9XSxcclxuICAgIG9uRmlsdGVyOiBbeyB0eXBlOiBPdXRwdXQgfV0sXHJcbiAgICBvbkdyb3Vwc2NoYW5nZWQ6IFt7IHR5cGU6IE91dHB1dCB9XSxcclxuICAgIG9uR3JvdXBleHBhbmQ6IFt7IHR5cGU6IE91dHB1dCB9XSxcclxuICAgIG9uR3JvdXBjb2xsYXBzZTogW3sgdHlwZTogT3V0cHV0IH1dLFxyXG4gICAgb25QYWdlY2hhbmdlZDogW3sgdHlwZTogT3V0cHV0IH1dLFxyXG4gICAgb25QYWdlc2l6ZWNoYW5nZWQ6IFt7IHR5cGU6IE91dHB1dCB9XSxcclxuICAgIG9uUm93Y2xpY2s6IFt7IHR5cGU6IE91dHB1dCB9XSxcclxuICAgIG9uUm93ZG91YmxlY2xpY2s6IFt7IHR5cGU6IE91dHB1dCB9XSxcclxuICAgIG9uUm93c2VsZWN0OiBbeyB0eXBlOiBPdXRwdXQgfV0sXHJcbiAgICBvblJvd3Vuc2VsZWN0OiBbeyB0eXBlOiBPdXRwdXQgfV0sXHJcbiAgICBvblJvd2V4cGFuZDogW3sgdHlwZTogT3V0cHV0IH1dLFxyXG4gICAgb25Sb3djb2xsYXBzZTogW3sgdHlwZTogT3V0cHV0IH1dLFxyXG4gICAgb25Tb3J0OiBbeyB0eXBlOiBPdXRwdXQgfV1cclxufTtcblxuY2xhc3MganF4R3JpZE1vZHVsZSB7XHJcbn1cclxuanF4R3JpZE1vZHVsZS5kZWNvcmF0b3JzID0gW1xyXG4gICAgeyB0eXBlOiBOZ01vZHVsZSwgYXJnczogW3tcclxuICAgICAgICAgICAgICAgIGltcG9ydHM6IFtdLFxyXG4gICAgICAgICAgICAgICAgZGVjbGFyYXRpb25zOiBbanF4R3JpZENvbXBvbmVudF0sXHJcbiAgICAgICAgICAgICAgICBleHBvcnRzOiBbanF4R3JpZENvbXBvbmVudF1cclxuICAgICAgICAgICAgfSxdIH1cclxuXTtcblxuLyoqXHJcbiAqIEdlbmVyYXRlZCBidW5kbGUgaW5kZXguIERvIG5vdCBlZGl0LlxyXG4gKi9cblxuZXhwb3J0IHsganF4R3JpZENvbXBvbmVudCwganF4R3JpZE1vZHVsZSB9O1xuIl19