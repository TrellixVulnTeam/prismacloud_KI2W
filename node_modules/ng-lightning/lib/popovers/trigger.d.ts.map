{"version":3,"file":"trigger.d.ts","sources":["trigger.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, TemplateRef, ViewContainerRef, OnDestroy, OnChanges, SimpleChanges, EventEmitter, Renderer2 } from '@angular/core';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { Placement } from '../util/overlay-position';\nexport declare type Size = 'small' | 'medium' | 'large' | 'full-width';\nexport declare type Variant = 'walkthrough' | 'feature' | 'warning' | 'error' | 'panel';\nexport declare class NglPopoverTrigger implements OnChanges, OnDestroy {\n    private element;\n    private renderer;\n    private viewContainerRef;\n    private overlay;\n    /**\n     * The body as string or the connected template reference to show.\n     */\n    template: string | TemplateRef<void>;\n    /**\n     * The header as string or the connected template reference to show.\n     */\n    header: string | TemplateRef<void>;\n    /**\n     * The footer as string or the connected template reference to show.\n     */\n    footer: string | TemplateRef<void>;\n    /**\n     * Determines the variant of the popover.\n     */\n    variant: Variant;\n    /**\n     * Determines the size of the popover.\n     */\n    size: Size;\n    /**\n     * Position relative to host element.\n     */\n    set placement(_placement: Placement);\n    get placement(): Placement;\n    /**\n     * Whether the floating popover is visible.\n     */\n    set nglOpen(_open: any);\n    get nglOpen(): any;\n    /**\n     * Close button title (and assistive text).\n     */\n    closeTitle: string;\n    popoverClass: any;\n    /**\n       * Whether or not to override the close button's visibility, if `nglPopoverOpenChange` is set.\n       */\n    closeVisible: boolean;\n    /** Emit an event when actual popover is shown or hidden */\n    nglPopoverOpenChange: EventEmitter<any>;\n    canClose: boolean;\n    /** Names of properties that should be proxy to child component. */\n    private needProxyProperties;\n    private _placement;\n    private _open;\n    private portal;\n    private overlayRef;\n    private popover;\n    private backdrop;\n    private closeSubscription;\n    private positionChangesSubscription;\n    private globalClickEventUnsubscriber;\n    private clickEventUnsubscriber;\n    private globalClickTimeout;\n    constructor(element: ElementRef, renderer: Renderer2, viewContainerRef: ViewContainerRef, overlay: Overlay);\n    ngOnChanges(changes: SimpleChanges): void;\n    onclick(evt: Event): void;\n    ngOnDestroy(): void;\n    private open;\n    private close;\n    private toggle;\n    private create;\n    /** Detaches the currently attached popover. */\n    private detach;\n    /** Create the overlay config and position strategy */\n    private createOverlay;\n    /** Updates the position of the current popover. */\n    private updatePosition;\n    private updatePopover;\n    /** Set inputs of child components when this component's inputs change. */\n    private updateProxies;\n    /** Returns a stream that emits whenever an action that should close the popover occurs. */\n    private popoverClosingActions;\n    private handleGlobalClickEvent;\n    private subscribeToClickEvents;\n    private unsubscribeFromClickEvents;\n    private clearGlobalClickTimeout;\n}\n"]}