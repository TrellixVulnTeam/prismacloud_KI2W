{"version":3,"file":"button-icon.d.ts","sources":["button-icon.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, Renderer2, OnInit, OnChanges } from '@angular/core';\nimport { HostService } from '../common/host/host.service';\nexport declare class NglButtonIcon implements OnInit, OnChanges {\n    private el;\n    private hostService;\n    /**\n     * LDS name of the icon.\n     * Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed.\n     * Only utility icons can be used in this component.\n     */\n    iconName: string;\n    /**\n     * Fallback value for `alternativeText`.\n     */\n    title: string;\n    /**\n     * The alternative text used to describe the icon.\n     * This text should describe what happens, not what the icon looks like.\n     */\n    alternativeText: any;\n    /**\n     * The variant changes the appearance of the button\n     */\n    variant: 'bare' | 'container' | 'brand' | 'border' | 'border-filled' | 'inverse' | 'border-inverse';\n    /**\n     *  For non-bare variants, the size applies to the button, otherwise it applies to the icon itself\n     */\n    size: string;\n    /**\n     * CSS classes that are applied to the SVG.\n     */\n    svgClass: string | string[] | Set<string> | {\n        [klass: string]: any;\n    };\n    get altText(): any;\n    constructor(el: ElementRef, hostService: HostService, renderer: Renderer2);\n    ngOnInit(): void;\n    ngOnChanges(): void;\n    iconClass(): {\n        [klass: string]: any;\n    };\n    private setHostClass;\n    private hasVariant;\n}\n"]}