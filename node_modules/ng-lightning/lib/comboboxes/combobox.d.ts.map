{"version":3,"file":"combobox.d.ts","sources":["combobox.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnChanges, TemplateRef, OnDestroy, QueryList, SimpleChanges, NgZone, ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { ConnectionPositionPair, CdkOverlayOrigin, CdkConnectedOverlay } from '@angular/cdk/overlay';\nimport { NglComboboxOption } from './combobox-option';\nimport { NglComboboxInput } from './combobox-input';\nimport { NglComboboxService } from './combobox.service';\nimport { NglComboboxConfig } from './config';\nexport interface NglComboboxOptionItem {\n    value: number | string;\n    label?: string;\n    disabled?: boolean;\n}\nexport declare class NglCombobox implements OnChanges, OnDestroy {\n    private ngZone;\n    private cd;\n    private service;\n    readonly variant: 'base' | 'lookup';\n    readonly label: string | TemplateRef<any>;\n    readonly uid: string;\n    readonly open = false;\n    openChange: EventEmitter<boolean>;\n    readonly selection: any;\n    selectionChange: EventEmitter<any>;\n    readonly multiple = false;\n    readonly visibleLength: 5 | 7 | 10;\n    inputEl: NglComboboxInput;\n    readonly loading: boolean;\n    readonly loadingMore: boolean;\n    readonly closeOnSelection = true;\n    /**\n     * Text added to loading spinner.\n     */\n    loadingLabel: string;\n    /**\n     * Text message that renders when no matches found.\n     */\n    noOptionsFound: string;\n    /**\n     * Text for removing single selected option.\n     */\n    removeSelectedLabel: string;\n    readonly options: QueryList<NglComboboxOption>;\n    set data(data: any[]);\n    get data(): any[];\n    overlayOrigin: CdkOverlayOrigin;\n    cdkOverlay: CdkConnectedOverlay;\n    dropdownElementRef: ElementRef;\n    overlayWidth: number;\n    overlayPositions: ConnectionPositionPair[];\n    /** Manages active item in option list based on key events. */\n    keyManager: ActiveDescendantKeyManager<NglComboboxOption>;\n    private optionChangesSubscription;\n    private _data;\n    private keyboardSubscription;\n    selectionValueFn: (selection: string[]) => string;\n    get activeOption(): NglComboboxOption | null;\n    get selectedOptions(): NglComboboxOptionItem[];\n    get isLookup(): boolean;\n    get hasLookupSingleSelection(): boolean;\n    constructor(defaultConfig: NglComboboxConfig, ngZone: NgZone, cd: ChangeDetectorRef, service: NglComboboxService);\n    ngOnChanges(changes: SimpleChanges): void;\n    onAttach(): void;\n    onDetach(): void;\n    trackByOption(index: any, option: NglComboboxOption): any;\n    dropdownClass(): {\n        [x: string]: boolean;\n    };\n    inputIconRight(): \"utility:search\" | \"utility:down\";\n    hasNoMatches(): boolean;\n    onOptionSelection(option?: NglComboboxOption): void;\n    onClearSelection(): void;\n    /**\n     * Check whether value is currently selected.\n     *\n     * @param value The value in test, whether is (part of) selection or not\n     */\n    isSelected(value: any): boolean;\n    ngOnDestroy(): void;\n    close(): void;\n    private detach;\n    private calculateDisplayValue;\n    private keyboardSubscribe;\n    private updateMenuHeight;\n}\n"]}